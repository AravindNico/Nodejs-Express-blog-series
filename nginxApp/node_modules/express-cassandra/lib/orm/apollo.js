'use strict';

var async = require('async');
var util = require('util');
var _ = require('lodash');
var cql = require('dse-driver');

var BaseModel = require('./base_model');
var schemer = require('./apollo_schemer');

var DEFAULT_REPLICATION_FACTOR = 1;

var noop = function noop() {};

var Apollo = function f(connection, options) {
  if (!connection) throw new Error('Data connection configuration undefined');

  options = options || {};

  if (!options.defaultReplicationStrategy) {
    options.defaultReplicationStrategy = {
      class: 'SimpleStrategy',
      replication_factor: DEFAULT_REPLICATION_FACTOR
    };
  }

  this._options = options;
  this._models = {};
  this._keyspace = connection.keyspace;
  this._connection = connection;
  this._client = null;
};

Apollo.prototype = {
  _generate_model: function _generate_model(properties, callback) {
    var Model = function f() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      BaseModel.apply(this, Array.prototype.slice.call(args));
    };

    util.inherits(Model, BaseModel);

    Object.keys(BaseModel).forEach(function (key) {
      Model[key] = BaseModel[key];
    });

    Model._set_properties(properties);
    Model.syncDefinition(function (err, result) {
      if (typeof callback === 'function') {
        if (err) callback(err);else callback(null, result);
      }
    });

    return Model;
  },
  _get_system_client: function _get_system_client() {
    var connection = _.cloneDeep(this._connection);
    delete connection.keyspace;

    return new cql.Client(connection);
  },
  _generate_replication_text: function _generate_replication_text(replicationOption) {
    if (typeof replicationOption === 'string') {
      return replicationOption;
    }

    var properties = [];
    Object.keys(replicationOption).forEach(function (k) {
      properties.push(util.format("'%s': '%s'", k, replicationOption[k]));
    });

    return util.format('{%s}', properties.join(','));
  },
  _assert_keyspace: function _assert_keyspace(callback) {
    var self = this;
    var client = this._get_system_client();
    var keyspaceName = this._connection.keyspace;
    var replicationText = '';
    var options = this._options;

    var query = util.format("SELECT * FROM system_schema.keyspaces WHERE keyspace_name = '%s';", keyspaceName);
    client.execute(query, function (err, result) {
      if (err) {
        callback(err);
        return;
      }

      var createKeyspace = function createKeyspace() {
        replicationText = self._generate_replication_text(options.defaultReplicationStrategy);

        query = util.format('CREATE KEYSPACE IF NOT EXISTS "%s" WITH REPLICATION = %s;', keyspaceName, replicationText);
        client.execute(query, function (err1, result1) {
          client.shutdown(function () {
            callback(err1, result1);
          });
        });
      };

      var alterKeyspace = function alterKeyspace() {
        replicationText = self._generate_replication_text(options.defaultReplicationStrategy);

        query = util.format('ALTER KEYSPACE "%s" WITH REPLICATION = %s;', keyspaceName, replicationText);
        client.execute(query, function (err1, result1) {
          client.shutdown(function () {
            // eslint-disable-next-line no-console
            console.warn('WARN: KEYSPACE ALTERED! Run the `nodetool repair` command on each affected node.');
            callback(err1, result1);
          });
        });
      };

      if (result.rows && result.rows.length > 0) {
        (function () {
          var dbReplication = result.rows[0].replication;

          Object.keys(dbReplication).forEach(function (key) {
            if (key === 'class') dbReplication[key] = dbReplication[key].replace('org.apache.cassandra.locator.', '');else dbReplication[key] = parseInt(dbReplication[key], 10);
          });

          var ormReplication = options.defaultReplicationStrategy;
          Object.keys(ormReplication).forEach(function (key) {
            if (key === 'class') ormReplication[key] = ormReplication[key].replace('org.apache.cassandra.locator.', '');else ormReplication[key] = parseInt(ormReplication[key], 10);
          });

          if (_.isEqual(dbReplication, ormReplication)) {
            callback();
          } else {
            alterKeyspace();
          }
        })();
      } else {
        createKeyspace();
      }
    });
  },
  _assert_user_defined_types: function _assert_user_defined_types(callback) {
    var client = this._define_connection;
    var options = this._options;
    var keyspace = this._keyspace;

    if (options.udts) {
      async.eachSeries(Object.keys(options.udts), function (udtKey, udtCallback) {
        var query = util.format("SELECT * FROM system_schema.types WHERE keyspace_name = '%s' AND type_name = '%s';", keyspace, udtKey);
        client.execute(query, function (err, result) {
          if (err) {
            udtCallback(err);
            return;
          }

          var createUDT = function createUDT() {
            var udtFields = [];
            Object.keys(options.udts[udtKey]).forEach(function (field) {
              udtFields.push(util.format('"%s" %s', field, options.udts[udtKey][field]));
            });
            query = util.format('CREATE TYPE IF NOT EXISTS "%s" (%s);', udtKey, udtFields.toString());
            client.execute(query, function (err1) {
              udtCallback(err1);
            });
          };

          if (result.rows && result.rows.length > 0) {
            var udtKeys = Object.keys(options.udts[udtKey]);
            var udtValues = _.values(options.udts[udtKey]);
            for (var i = 0; i < udtValues.length; i++) {
              udtValues[i] = udtValues[i].replace(/[\s]/g, '');
              if (udtValues[i].indexOf('<') > -1 && udtValues[i].indexOf('frozen<') !== 0) {
                udtValues[i] = util.format('frozen<%s>', udtValues[i]);
              }
            }

            var fieldNames = result.rows[0].field_names;
            var fieldTypes = result.rows[0].field_types;
            for (var _i = 0; _i < fieldTypes.length; _i++) {
              fieldTypes[_i] = fieldTypes[_i].replace(/[\s]/g, '');
              if (fieldTypes[_i].indexOf('<') > -1 && fieldTypes[_i].indexOf('frozen<') !== 0) {
                fieldTypes[_i] = util.format('frozen<%s>', fieldTypes[_i]);
              }
            }

            if (_.isEqual(udtKeys, fieldNames) && _.isEqual(udtValues, fieldTypes)) {
              udtCallback();
            } else {
              throw new Error(util.format('User defined type "%s" already exists but does not match the udt definition. ' + 'Consider altering or droping the type.', udtKey));
            }
          } else {
            createUDT();
          }
        });
      }, function (err) {
        callback(err);
      });
    } else {
      callback();
    }
  },
  _assert_user_defined_functions: function _assert_user_defined_functions(callback) {
    var client = this._define_connection;
    var options = this._options;
    var keyspace = this._keyspace;

    if (options.udfs) {
      async.eachSeries(Object.keys(options.udfs), function (udfKey, udfCallback) {
        if (!options.udfs[udfKey].returnType) {
          throw new Error(util.format('No returnType defined for user defined function: %s', udfKey));
        }
        if (!options.udfs[udfKey].language) {
          throw new Error(util.format('No language defined for user defined function: %s', udfKey));
        }
        if (!options.udfs[udfKey].code) {
          throw new Error(util.format('No code defined for user defined function: %s', udfKey));
        }
        if (options.udfs[udfKey].inputs && !_.isPlainObject(options.udfs[udfKey].inputs)) {
          throw new Error(util.format('inputs must be an object for user defined function: %s', udfKey));
        }
        if (options.udfs[udfKey].inputs instanceof Array) {
          throw new Error(util.format('inputs must be an object, not an array for user defined function: %s', udfKey));
        }

        var query = util.format("SELECT * FROM system_schema.functions WHERE keyspace_name = '%s' AND function_name = '%s';", keyspace, udfKey.toLowerCase());
        client.execute(query, function (err, result) {
          if (err) {
            udfCallback(err);
            return;
          }

          var createUDF = function createUDF() {
            var udfInputs = [];
            if (options.udfs[udfKey].inputs) {
              Object.keys(options.udfs[udfKey].inputs).forEach(function (input) {
                udfInputs.push(util.format('%s %s', input, options.udfs[udfKey].inputs[input]));
              });
            }
            query = util.format("CREATE OR REPLACE FUNCTION %s (%s) CALLED ON NULL INPUT RETURNS %s LANGUAGE %s AS '%s';", udfKey, udfInputs.toString(), options.udfs[udfKey].returnType, options.udfs[udfKey].language, options.udfs[udfKey].code);
            client.execute(query, function (err1) {
              udfCallback(err1);
            });
          };

          if (result.rows && result.rows.length > 0) {
            var udfLanguage = options.udfs[udfKey].language;
            var resultLanguage = result.rows[0].language;

            var udfCode = options.udfs[udfKey].code;
            var resultCode = result.rows[0].body;

            var udfReturnType = options.udfs[udfKey].returnType;
            udfReturnType = udfReturnType.replace(/[\s]/g, '');
            if (udfReturnType.indexOf('<') > -1 && udfReturnType.indexOf('frozen<') !== 0) {
              udfReturnType = util.format('frozen<%s>', udfReturnType);
            }
            var resultReturnType = result.rows[0].return_type;
            resultReturnType = resultReturnType.replace(/[\s]/g, '');
            if (resultReturnType.indexOf('<') > -1 && resultReturnType.indexOf('frozen<') !== 0) {
              resultReturnType = util.format('frozen<%s>', resultReturnType);
            }

            var udfInputs = options.udfs[udfKey].inputs ? options.udfs[udfKey].inputs : {};
            var udfInputKeys = Object.keys(udfInputs);
            var udfInputValues = _.values(udfInputs);
            for (var i = 0; i < udfInputValues.length; i++) {
              udfInputValues[i] = udfInputValues[i].replace(/[\s]/g, '');
              if (udfInputValues[i].indexOf('<') > -1 && udfInputValues[i].indexOf('frozen<') !== 0) {
                udfInputValues[i] = util.format('frozen<%s>', udfInputValues[i]);
              }
            }
            var resultArgumentNames = result.rows[0].argument_names;
            var resultArgumentTypes = result.rows[0].argument_types;
            for (var _i2 = 0; _i2 < resultArgumentTypes.length; _i2++) {
              resultArgumentTypes[_i2] = resultArgumentTypes[_i2].replace(/[\s]/g, '');
              if (resultArgumentTypes[_i2].indexOf('<') > -1 && resultArgumentTypes[_i2].indexOf('frozen<') !== 0) {
                resultArgumentTypes[_i2] = util.format('frozen<%s>', resultArgumentTypes[_i2]);
              }
            }

            if (udfLanguage === resultLanguage && udfCode === resultCode && udfReturnType === resultReturnType && _.isEqual(udfInputKeys, resultArgumentNames) && _.isEqual(udfInputValues, resultArgumentTypes)) {
              udfCallback();
            } else {
              createUDF();
            }
          } else {
            createUDF();
          }
        });
      }, function (err) {
        callback(err);
      });
    } else {
      callback();
    }
  },
  _assert_user_defined_aggregates: function _assert_user_defined_aggregates(callback) {
    var client = this._define_connection;
    var options = this._options;
    var keyspace = this._keyspace;

    if (options.udas) {
      async.eachSeries(Object.keys(options.udas), function (udaKey, udaCallback) {
        if (!options.udas[udaKey].input_types) {
          throw new Error(util.format('No input_types defined for user defined function: %s', udaKey));
        }
        if (!(options.udas[udaKey].input_types instanceof Array)) {
          throw new Error(util.format('input_types must be an array for user defined function: %s', udaKey));
        }
        if (options.udas[udaKey].input_types.length < 1) {
          throw new Error(util.format('input_types array cannot be blank for user defined function: %s', udaKey));
        }
        if (!options.udas[udaKey].sfunc) {
          throw new Error(util.format('No sfunc defined for user defined aggregate: %s', udaKey));
        }
        if (!options.udas[udaKey].stype) {
          throw new Error(util.format('No stype defined for user defined aggregate: %s', udaKey));
        }
        if (!options.udas[udaKey].initcond) {
          options.udas[udaKey].initcond = null;
        }

        var query = util.format("SELECT * FROM system_schema.aggregates WHERE keyspace_name = '%s' AND aggregate_name = '%s';", keyspace, udaKey.toLowerCase());
        client.execute(query, function (err, result) {
          if (err) {
            udaCallback(err);
            return;
          }

          var createUDA = function createUDA() {
            query = util.format('CREATE OR REPLACE AGGREGATE %s (%s) SFUNC %s STYPE %s', udaKey, options.udas[udaKey].input_types.toString(), options.udas[udaKey].sfunc, options.udas[udaKey].stype);
            if (options.udas[udaKey].finalfunc) query += util.format(' FINALFUNC %s', options.udas[udaKey].finalfunc);
            query += util.format(' INITCOND %s;', options.udas[udaKey].initcond);

            client.execute(query, function (err1) {
              udaCallback(err1);
            });
          };

          if (result.rows && result.rows.length > 0) {
            var inputTypes = options.udas[udaKey].input_types;
            for (var i = 0; i < inputTypes.length; i++) {
              inputTypes[i] = inputTypes[i].replace(/[\s]/g, '');
              if (inputTypes[i].indexOf('<') > -1 && inputTypes[i].indexOf('frozen<') !== 0) {
                inputTypes[i] = util.format('frozen<%s>', inputTypes[i]);
              }
            }
            var sfunc = options.udas[udaKey].sfunc.toLowerCase();
            var stype = options.udas[udaKey].stype;
            stype = stype.replace(/[\s]/g, '');
            if (stype.indexOf('<') > -1 && stype.indexOf('frozen<') !== 0) {
              stype = util.format('frozen<%s>', stype);
            }
            var finalfunc = options.udas[udaKey].finalfunc;
            if (finalfunc) finalfunc = finalfunc.toLowerCase();else finalfunc = null;
            var initcond = options.udas[udaKey].initcond;
            if (initcond) initcond = initcond.replace(/[\s]/g, '');

            for (var _i3 = 0; _i3 < result.rows.length; _i3++) {
              var resultArgumentTypes = result.rows[_i3].argument_types;
              for (var j = 0; j < resultArgumentTypes.length; j++) {
                resultArgumentTypes[j] = resultArgumentTypes[j].replace(/[\s]/g, '');
                if (resultArgumentTypes[j].indexOf('<') > -1 && resultArgumentTypes[j].indexOf('frozen<') !== 0) {
                  resultArgumentTypes[j] = util.format('frozen<%s>', resultArgumentTypes[j]);
                }
              }

              var resultStateFunc = result.rows[_i3].state_func;
              var resultStateType = result.rows[_i3].state_type;
              resultStateType = resultStateType.replace(/[\s]/g, '');
              if (resultStateType.indexOf('<') > -1 && resultStateType.indexOf('frozen<') !== 0) {
                resultStateType = util.format('frozen<%s>', resultStateType);
              }

              var resultFinalFunc = result.rows[_i3].final_func;

              var resultInitcond = result.rows[_i3].initcond;
              if (resultInitcond) resultInitcond = resultInitcond.replace(/[\s]/g, '');

              if (sfunc === resultStateFunc && stype === resultStateType && finalfunc === resultFinalFunc && initcond === resultInitcond && _.isEqual(inputTypes, resultArgumentTypes)) {
                udaCallback();
                return;
              }
            }

            createUDA();
          } else {
            createUDA();
          }
        });
      }, function (err) {
        callback(err);
      });
    } else {
      callback();
    }
  },
  _set_client: function _set_client(client) {
    var _this = this;

    var defineConnectionOptions = _.cloneDeep(this._connection);

    this._client = client;
    this._define_connection = new cql.Client(defineConnectionOptions);

    // Reset connections on all models
    Object.keys(this._models).forEach(function (i) {
      _this._models[i]._properties.cql = _this._client;
      _this._models[i]._properties.define_connection = _this._define_connection;
    });
  },
  connect: function connect(callback) {
    var _this2 = this;

    var onUserDefinedAggregates = function onUserDefinedAggregates(err) {
      if (err) {
        callback(err);
        return;
      }
      callback(err, _this2);
    };

    var onUserDefinedFunctions = function f(err) {
      if (err) {
        callback(err);
        return;
      }
      this._assert_user_defined_aggregates(onUserDefinedAggregates.bind(this));
    };

    var onUserDefinedTypes = function f(err) {
      if (err) {
        callback(err);
        return;
      }
      this._assert_user_defined_functions(onUserDefinedFunctions.bind(this));
    };

    var onKeyspace = function f(err) {
      if (err) {
        callback(err);
        return;
      }
      this._set_client(new cql.Client(this._connection));
      this._assert_user_defined_types(onUserDefinedTypes.bind(this));
    };

    if (this._keyspace && this._options.createKeyspace) {
      this._assert_keyspace(onKeyspace.bind(this));
    } else {
      onKeyspace.call(this);
    }
  },
  add_model: function add_model(modelName, modelSchema, callback) {
    if (!modelName || typeof modelName !== 'string') {
      throw new Error('Model name must be a valid string');
    }

    schemer.validate_model_schema(modelSchema);

    var baseProperties = {
      name: modelName,
      schema: modelSchema,
      keyspace: this._keyspace,
      define_connection: this._define_connection,
      cql: this._client,
      get_constructor: this.get_model.bind(this, modelName),
      connect: this.connect.bind(this),
      dropTableOnSchemaChange: this._options.dropTableOnSchemaChange,
      migration: this._options.migration,
      disableTTYConfirmation: this._options.disableTTYConfirmation
    };

    return this._models[modelName] = this._generate_model(baseProperties, callback);
  },
  get_model: function get_model(modelName) {
    return this._models[modelName] || null;
  },
  close: function close(callback) {
    var _this3 = this;

    callback = callback || noop;

    if (!this._client) {
      callback();
      return;
    }
    this._client.shutdown(function (err) {
      if (!_this3._define_connection) {
        callback(err);
        return;
      }
      _this3._define_connection.shutdown(function (derr) {
        callback(err || derr);
      });
    });
  }
};

module.exports = Apollo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vcm0vYXBvbGxvLmpzIl0sIm5hbWVzIjpbImFzeW5jIiwicmVxdWlyZSIsInV0aWwiLCJfIiwiY3FsIiwiQmFzZU1vZGVsIiwic2NoZW1lciIsIkRFRkFVTFRfUkVQTElDQVRJT05fRkFDVE9SIiwibm9vcCIsIkFwb2xsbyIsImYiLCJjb25uZWN0aW9uIiwib3B0aW9ucyIsIkVycm9yIiwiZGVmYXVsdFJlcGxpY2F0aW9uU3RyYXRlZ3kiLCJjbGFzcyIsInJlcGxpY2F0aW9uX2ZhY3RvciIsIl9vcHRpb25zIiwiX21vZGVscyIsIl9rZXlzcGFjZSIsImtleXNwYWNlIiwiX2Nvbm5lY3Rpb24iLCJfY2xpZW50IiwicHJvdG90eXBlIiwiX2dlbmVyYXRlX21vZGVsIiwicHJvcGVydGllcyIsImNhbGxiYWNrIiwiTW9kZWwiLCJhcmdzIiwiYXBwbHkiLCJBcnJheSIsInNsaWNlIiwiY2FsbCIsImluaGVyaXRzIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJfc2V0X3Byb3BlcnRpZXMiLCJzeW5jRGVmaW5pdGlvbiIsImVyciIsInJlc3VsdCIsIl9nZXRfc3lzdGVtX2NsaWVudCIsImNsb25lRGVlcCIsIkNsaWVudCIsIl9nZW5lcmF0ZV9yZXBsaWNhdGlvbl90ZXh0IiwicmVwbGljYXRpb25PcHRpb24iLCJrIiwicHVzaCIsImZvcm1hdCIsImpvaW4iLCJfYXNzZXJ0X2tleXNwYWNlIiwic2VsZiIsImNsaWVudCIsImtleXNwYWNlTmFtZSIsInJlcGxpY2F0aW9uVGV4dCIsInF1ZXJ5IiwiZXhlY3V0ZSIsImNyZWF0ZUtleXNwYWNlIiwiZXJyMSIsInJlc3VsdDEiLCJzaHV0ZG93biIsImFsdGVyS2V5c3BhY2UiLCJjb25zb2xlIiwid2FybiIsInJvd3MiLCJsZW5ndGgiLCJkYlJlcGxpY2F0aW9uIiwicmVwbGljYXRpb24iLCJyZXBsYWNlIiwicGFyc2VJbnQiLCJvcm1SZXBsaWNhdGlvbiIsImlzRXF1YWwiLCJfYXNzZXJ0X3VzZXJfZGVmaW5lZF90eXBlcyIsIl9kZWZpbmVfY29ubmVjdGlvbiIsInVkdHMiLCJlYWNoU2VyaWVzIiwidWR0S2V5IiwidWR0Q2FsbGJhY2siLCJjcmVhdGVVRFQiLCJ1ZHRGaWVsZHMiLCJmaWVsZCIsInRvU3RyaW5nIiwidWR0S2V5cyIsInVkdFZhbHVlcyIsInZhbHVlcyIsImkiLCJpbmRleE9mIiwiZmllbGROYW1lcyIsImZpZWxkX25hbWVzIiwiZmllbGRUeXBlcyIsImZpZWxkX3R5cGVzIiwiX2Fzc2VydF91c2VyX2RlZmluZWRfZnVuY3Rpb25zIiwidWRmcyIsInVkZktleSIsInVkZkNhbGxiYWNrIiwicmV0dXJuVHlwZSIsImxhbmd1YWdlIiwiY29kZSIsImlucHV0cyIsImlzUGxhaW5PYmplY3QiLCJ0b0xvd2VyQ2FzZSIsImNyZWF0ZVVERiIsInVkZklucHV0cyIsImlucHV0IiwidWRmTGFuZ3VhZ2UiLCJyZXN1bHRMYW5ndWFnZSIsInVkZkNvZGUiLCJyZXN1bHRDb2RlIiwiYm9keSIsInVkZlJldHVyblR5cGUiLCJyZXN1bHRSZXR1cm5UeXBlIiwicmV0dXJuX3R5cGUiLCJ1ZGZJbnB1dEtleXMiLCJ1ZGZJbnB1dFZhbHVlcyIsInJlc3VsdEFyZ3VtZW50TmFtZXMiLCJhcmd1bWVudF9uYW1lcyIsInJlc3VsdEFyZ3VtZW50VHlwZXMiLCJhcmd1bWVudF90eXBlcyIsIl9hc3NlcnRfdXNlcl9kZWZpbmVkX2FnZ3JlZ2F0ZXMiLCJ1ZGFzIiwidWRhS2V5IiwidWRhQ2FsbGJhY2siLCJpbnB1dF90eXBlcyIsInNmdW5jIiwic3R5cGUiLCJpbml0Y29uZCIsImNyZWF0ZVVEQSIsImZpbmFsZnVuYyIsImlucHV0VHlwZXMiLCJqIiwicmVzdWx0U3RhdGVGdW5jIiwic3RhdGVfZnVuYyIsInJlc3VsdFN0YXRlVHlwZSIsInN0YXRlX3R5cGUiLCJyZXN1bHRGaW5hbEZ1bmMiLCJmaW5hbF9mdW5jIiwicmVzdWx0SW5pdGNvbmQiLCJfc2V0X2NsaWVudCIsImRlZmluZUNvbm5lY3Rpb25PcHRpb25zIiwiX3Byb3BlcnRpZXMiLCJkZWZpbmVfY29ubmVjdGlvbiIsImNvbm5lY3QiLCJvblVzZXJEZWZpbmVkQWdncmVnYXRlcyIsIm9uVXNlckRlZmluZWRGdW5jdGlvbnMiLCJiaW5kIiwib25Vc2VyRGVmaW5lZFR5cGVzIiwib25LZXlzcGFjZSIsImFkZF9tb2RlbCIsIm1vZGVsTmFtZSIsIm1vZGVsU2NoZW1hIiwidmFsaWRhdGVfbW9kZWxfc2NoZW1hIiwiYmFzZVByb3BlcnRpZXMiLCJuYW1lIiwic2NoZW1hIiwiZ2V0X2NvbnN0cnVjdG9yIiwiZ2V0X21vZGVsIiwiZHJvcFRhYmxlT25TY2hlbWFDaGFuZ2UiLCJtaWdyYXRpb24iLCJkaXNhYmxlVFRZQ29uZmlybWF0aW9uIiwiY2xvc2UiLCJkZXJyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNQSxRQUFRQyxRQUFRLE9BQVIsQ0FBZDtBQUNBLElBQU1DLE9BQU9ELFFBQVEsTUFBUixDQUFiO0FBQ0EsSUFBTUUsSUFBSUYsUUFBUSxRQUFSLENBQVY7QUFDQSxJQUFNRyxNQUFNSCxRQUFRLFlBQVIsQ0FBWjs7QUFFQSxJQUFNSSxZQUFZSixRQUFRLGNBQVIsQ0FBbEI7QUFDQSxJQUFNSyxVQUFVTCxRQUFRLGtCQUFSLENBQWhCOztBQUVBLElBQU1NLDZCQUE2QixDQUFuQzs7QUFFQSxJQUFNQyxPQUFPLFNBQVBBLElBQU8sR0FBTSxDQUFFLENBQXJCOztBQUVBLElBQU1DLFNBQVMsU0FBU0MsQ0FBVCxDQUFXQyxVQUFYLEVBQXVCQyxPQUF2QixFQUFnQztBQUM3QyxNQUFJLENBQUNELFVBQUwsRUFBaUIsTUFBTyxJQUFJRSxLQUFKLENBQVUseUNBQVYsQ0FBUDs7QUFFakJELFlBQVVBLFdBQVcsRUFBckI7O0FBRUEsTUFBSSxDQUFDQSxRQUFRRSwwQkFBYixFQUF5QztBQUN2Q0YsWUFBUUUsMEJBQVIsR0FBcUM7QUFDbkNDLGFBQU8sZ0JBRDRCO0FBRW5DQywwQkFBb0JUO0FBRmUsS0FBckM7QUFJRDs7QUFFRCxPQUFLVSxRQUFMLEdBQWdCTCxPQUFoQjtBQUNBLE9BQUtNLE9BQUwsR0FBZSxFQUFmO0FBQ0EsT0FBS0MsU0FBTCxHQUFpQlIsV0FBV1MsUUFBNUI7QUFDQSxPQUFLQyxXQUFMLEdBQW1CVixVQUFuQjtBQUNBLE9BQUtXLE9BQUwsR0FBZSxJQUFmO0FBQ0QsQ0FqQkQ7O0FBbUJBYixPQUFPYyxTQUFQLEdBQW1CO0FBRWpCQyxpQkFGaUIsMkJBRURDLFVBRkMsRUFFV0MsUUFGWCxFQUVxQjtBQUNwQyxRQUFNQyxRQUFRLFNBQVNqQixDQUFULEdBQW9CO0FBQUEsd0NBQU5rQixJQUFNO0FBQU5BLFlBQU07QUFBQTs7QUFDaEN2QixnQkFBVXdCLEtBQVYsQ0FBZ0IsSUFBaEIsRUFBc0JDLE1BQU1QLFNBQU4sQ0FBZ0JRLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQkosSUFBM0IsQ0FBdEI7QUFDRCxLQUZEOztBQUlBMUIsU0FBSytCLFFBQUwsQ0FBY04sS0FBZCxFQUFxQnRCLFNBQXJCOztBQUVBNkIsV0FBT0MsSUFBUCxDQUFZOUIsU0FBWixFQUF1QitCLE9BQXZCLENBQStCLFVBQUNDLEdBQUQsRUFBUztBQUN0Q1YsWUFBTVUsR0FBTixJQUFhaEMsVUFBVWdDLEdBQVYsQ0FBYjtBQUNELEtBRkQ7O0FBSUFWLFVBQU1XLGVBQU4sQ0FBc0JiLFVBQXRCO0FBQ0FFLFVBQU1ZLGNBQU4sQ0FBcUIsVUFBQ0MsR0FBRCxFQUFNQyxNQUFOLEVBQWlCO0FBQ3BDLFVBQUksT0FBT2YsUUFBUCxLQUFvQixVQUF4QixFQUFvQztBQUNsQyxZQUFJYyxHQUFKLEVBQVNkLFNBQVNjLEdBQVQsRUFBVCxLQUNLZCxTQUFTLElBQVQsRUFBZWUsTUFBZjtBQUNOO0FBQ0YsS0FMRDs7QUFPQSxXQUFPZCxLQUFQO0FBQ0QsR0F0QmdCO0FBd0JqQmUsb0JBeEJpQixnQ0F3Qkk7QUFDbkIsUUFBTS9CLGFBQWFSLEVBQUV3QyxTQUFGLENBQVksS0FBS3RCLFdBQWpCLENBQW5CO0FBQ0EsV0FBT1YsV0FBV1MsUUFBbEI7O0FBRUEsV0FBTyxJQUFJaEIsSUFBSXdDLE1BQVIsQ0FBZWpDLFVBQWYsQ0FBUDtBQUNELEdBN0JnQjtBQStCakJrQyw0QkEvQmlCLHNDQStCVUMsaUJBL0JWLEVBK0I2QjtBQUM1QyxRQUFJLE9BQU9BLGlCQUFQLEtBQTZCLFFBQWpDLEVBQTJDO0FBQ3pDLGFBQU9BLGlCQUFQO0FBQ0Q7O0FBRUQsUUFBTXJCLGFBQWEsRUFBbkI7QUFDQVMsV0FBT0MsSUFBUCxDQUFZVyxpQkFBWixFQUErQlYsT0FBL0IsQ0FBdUMsVUFBQ1csQ0FBRCxFQUFPO0FBQzVDdEIsaUJBQVd1QixJQUFYLENBQWdCOUMsS0FBSytDLE1BQUwsQ0FBWSxZQUFaLEVBQTBCRixDQUExQixFQUE2QkQsa0JBQWtCQyxDQUFsQixDQUE3QixDQUFoQjtBQUNELEtBRkQ7O0FBSUEsV0FBTzdDLEtBQUsrQyxNQUFMLENBQVksTUFBWixFQUFvQnhCLFdBQVd5QixJQUFYLENBQWdCLEdBQWhCLENBQXBCLENBQVA7QUFDRCxHQTFDZ0I7QUE0Q2pCQyxrQkE1Q2lCLDRCQTRDQXpCLFFBNUNBLEVBNENVO0FBQ3pCLFFBQU0wQixPQUFPLElBQWI7QUFDQSxRQUFNQyxTQUFTLEtBQUtYLGtCQUFMLEVBQWY7QUFDQSxRQUFNWSxlQUFlLEtBQUtqQyxXQUFMLENBQWlCRCxRQUF0QztBQUNBLFFBQUltQyxrQkFBa0IsRUFBdEI7QUFDQSxRQUFNM0MsVUFBVSxLQUFLSyxRQUFyQjs7QUFFQSxRQUFJdUMsUUFBUXRELEtBQUsrQyxNQUFMLENBQ1YsbUVBRFUsRUFFVkssWUFGVSxDQUFaO0FBSUFELFdBQU9JLE9BQVAsQ0FBZUQsS0FBZixFQUFzQixVQUFDaEIsR0FBRCxFQUFNQyxNQUFOLEVBQWlCO0FBQ3JDLFVBQUlELEdBQUosRUFBUztBQUNQZCxpQkFBU2MsR0FBVDtBQUNBO0FBQ0Q7O0FBRUQsVUFBTWtCLGlCQUFpQixTQUFqQkEsY0FBaUIsR0FBTTtBQUMzQkgsMEJBQWtCSCxLQUFLUCwwQkFBTCxDQUFnQ2pDLFFBQVFFLDBCQUF4QyxDQUFsQjs7QUFFQTBDLGdCQUFRdEQsS0FBSytDLE1BQUwsQ0FDTiwyREFETSxFQUVOSyxZQUZNLEVBR05DLGVBSE0sQ0FBUjtBQUtBRixlQUFPSSxPQUFQLENBQWVELEtBQWYsRUFBc0IsVUFBQ0csSUFBRCxFQUFPQyxPQUFQLEVBQW1CO0FBQ3ZDUCxpQkFBT1EsUUFBUCxDQUFnQixZQUFNO0FBQ3BCbkMscUJBQVNpQyxJQUFULEVBQWVDLE9BQWY7QUFDRCxXQUZEO0FBR0QsU0FKRDtBQUtELE9BYkQ7O0FBZUEsVUFBTUUsZ0JBQWdCLFNBQWhCQSxhQUFnQixHQUFNO0FBQzFCUCwwQkFBa0JILEtBQUtQLDBCQUFMLENBQWdDakMsUUFBUUUsMEJBQXhDLENBQWxCOztBQUVBMEMsZ0JBQVF0RCxLQUFLK0MsTUFBTCxDQUNOLDRDQURNLEVBRU5LLFlBRk0sRUFHTkMsZUFITSxDQUFSO0FBS0FGLGVBQU9JLE9BQVAsQ0FBZUQsS0FBZixFQUFzQixVQUFDRyxJQUFELEVBQU9DLE9BQVAsRUFBbUI7QUFDdkNQLGlCQUFPUSxRQUFQLENBQWdCLFlBQU07QUFDcEI7QUFDQUUsb0JBQVFDLElBQVIsQ0FBYSxrRkFBYjtBQUNBdEMscUJBQVNpQyxJQUFULEVBQWVDLE9BQWY7QUFDRCxXQUpEO0FBS0QsU0FORDtBQU9ELE9BZkQ7O0FBaUJBLFVBQUluQixPQUFPd0IsSUFBUCxJQUFleEIsT0FBT3dCLElBQVAsQ0FBWUMsTUFBWixHQUFxQixDQUF4QyxFQUEyQztBQUFBO0FBQ3pDLGNBQU1DLGdCQUFnQjFCLE9BQU93QixJQUFQLENBQVksQ0FBWixFQUFlRyxXQUFyQzs7QUFFQWxDLGlCQUFPQyxJQUFQLENBQVlnQyxhQUFaLEVBQTJCL0IsT0FBM0IsQ0FBbUMsVUFBQ0MsR0FBRCxFQUFTO0FBQzFDLGdCQUFJQSxRQUFRLE9BQVosRUFBcUI4QixjQUFjOUIsR0FBZCxJQUFxQjhCLGNBQWM5QixHQUFkLEVBQW1CZ0MsT0FBbkIsQ0FBMkIsK0JBQTNCLEVBQTRELEVBQTVELENBQXJCLENBQXJCLEtBQ0tGLGNBQWM5QixHQUFkLElBQXFCaUMsU0FBU0gsY0FBYzlCLEdBQWQsQ0FBVCxFQUE2QixFQUE3QixDQUFyQjtBQUNOLFdBSEQ7O0FBS0EsY0FBTWtDLGlCQUFpQjNELFFBQVFFLDBCQUEvQjtBQUNBb0IsaUJBQU9DLElBQVAsQ0FBWW9DLGNBQVosRUFBNEJuQyxPQUE1QixDQUFvQyxVQUFDQyxHQUFELEVBQVM7QUFDM0MsZ0JBQUlBLFFBQVEsT0FBWixFQUFxQmtDLGVBQWVsQyxHQUFmLElBQXNCa0MsZUFBZWxDLEdBQWYsRUFBb0JnQyxPQUFwQixDQUE0QiwrQkFBNUIsRUFBNkQsRUFBN0QsQ0FBdEIsQ0FBckIsS0FDS0UsZUFBZWxDLEdBQWYsSUFBc0JpQyxTQUFTQyxlQUFlbEMsR0FBZixDQUFULEVBQThCLEVBQTlCLENBQXRCO0FBQ04sV0FIRDs7QUFLQSxjQUFJbEMsRUFBRXFFLE9BQUYsQ0FBVUwsYUFBVixFQUF5QkksY0FBekIsQ0FBSixFQUE4QztBQUM1QzdDO0FBQ0QsV0FGRCxNQUVPO0FBQ0xvQztBQUNEO0FBbEJ3QztBQW1CMUMsT0FuQkQsTUFtQk87QUFDTEo7QUFDRDtBQUNGLEtBNUREO0FBNkRELEdBcEhnQjtBQXNIakJlLDRCQXRIaUIsc0NBc0hVL0MsUUF0SFYsRUFzSG9CO0FBQ25DLFFBQU0yQixTQUFTLEtBQUtxQixrQkFBcEI7QUFDQSxRQUFNOUQsVUFBVSxLQUFLSyxRQUFyQjtBQUNBLFFBQU1HLFdBQVcsS0FBS0QsU0FBdEI7O0FBRUEsUUFBSVAsUUFBUStELElBQVosRUFBa0I7QUFDaEIzRSxZQUFNNEUsVUFBTixDQUFpQjFDLE9BQU9DLElBQVAsQ0FBWXZCLFFBQVErRCxJQUFwQixDQUFqQixFQUE0QyxVQUFDRSxNQUFELEVBQVNDLFdBQVQsRUFBeUI7QUFDbkUsWUFBSXRCLFFBQVF0RCxLQUFLK0MsTUFBTCxDQUNWLG9GQURVLEVBRVY3QixRQUZVLEVBR1Z5RCxNQUhVLENBQVo7QUFLQXhCLGVBQU9JLE9BQVAsQ0FBZUQsS0FBZixFQUFzQixVQUFDaEIsR0FBRCxFQUFNQyxNQUFOLEVBQWlCO0FBQ3JDLGNBQUlELEdBQUosRUFBUztBQUNQc0Msd0JBQVl0QyxHQUFaO0FBQ0E7QUFDRDs7QUFFRCxjQUFNdUMsWUFBWSxTQUFaQSxTQUFZLEdBQU07QUFDdEIsZ0JBQU1DLFlBQVksRUFBbEI7QUFDQTlDLG1CQUFPQyxJQUFQLENBQVl2QixRQUFRK0QsSUFBUixDQUFhRSxNQUFiLENBQVosRUFBa0N6QyxPQUFsQyxDQUEwQyxVQUFDNkMsS0FBRCxFQUFXO0FBQ25ERCx3QkFBVWhDLElBQVYsQ0FBZTlDLEtBQUsrQyxNQUFMLENBQ2IsU0FEYSxFQUViZ0MsS0FGYSxFQUdickUsUUFBUStELElBQVIsQ0FBYUUsTUFBYixFQUFxQkksS0FBckIsQ0FIYSxDQUFmO0FBS0QsYUFORDtBQU9BekIsb0JBQVF0RCxLQUFLK0MsTUFBTCxDQUNOLHNDQURNLEVBRU40QixNQUZNLEVBR05HLFVBQVVFLFFBQVYsRUFITSxDQUFSO0FBS0E3QixtQkFBT0ksT0FBUCxDQUFlRCxLQUFmLEVBQXNCLFVBQUNHLElBQUQsRUFBVTtBQUM5Qm1CLDBCQUFZbkIsSUFBWjtBQUNELGFBRkQ7QUFHRCxXQWpCRDs7QUFtQkEsY0FBSWxCLE9BQU93QixJQUFQLElBQWV4QixPQUFPd0IsSUFBUCxDQUFZQyxNQUFaLEdBQXFCLENBQXhDLEVBQTJDO0FBQ3pDLGdCQUFNaUIsVUFBVWpELE9BQU9DLElBQVAsQ0FBWXZCLFFBQVErRCxJQUFSLENBQWFFLE1BQWIsQ0FBWixDQUFoQjtBQUNBLGdCQUFNTyxZQUFZakYsRUFBRWtGLE1BQUYsQ0FBU3pFLFFBQVErRCxJQUFSLENBQWFFLE1BQWIsQ0FBVCxDQUFsQjtBQUNBLGlCQUFLLElBQUlTLElBQUksQ0FBYixFQUFnQkEsSUFBSUYsVUFBVWxCLE1BQTlCLEVBQXNDb0IsR0FBdEMsRUFBMkM7QUFDekNGLHdCQUFVRSxDQUFWLElBQWVGLFVBQVVFLENBQVYsRUFBYWpCLE9BQWIsQ0FBcUIsT0FBckIsRUFBOEIsRUFBOUIsQ0FBZjtBQUNBLGtCQUFJZSxVQUFVRSxDQUFWLEVBQWFDLE9BQWIsQ0FBcUIsR0FBckIsSUFBNEIsQ0FBQyxDQUE3QixJQUFrQ0gsVUFBVUUsQ0FBVixFQUFhQyxPQUFiLENBQXFCLFNBQXJCLE1BQW9DLENBQTFFLEVBQTZFO0FBQzNFSCwwQkFBVUUsQ0FBVixJQUFlcEYsS0FBSytDLE1BQUwsQ0FBWSxZQUFaLEVBQTBCbUMsVUFBVUUsQ0FBVixDQUExQixDQUFmO0FBQ0Q7QUFDRjs7QUFFRCxnQkFBTUUsYUFBYS9DLE9BQU93QixJQUFQLENBQVksQ0FBWixFQUFld0IsV0FBbEM7QUFDQSxnQkFBTUMsYUFBYWpELE9BQU93QixJQUFQLENBQVksQ0FBWixFQUFlMEIsV0FBbEM7QUFDQSxpQkFBSyxJQUFJTCxLQUFJLENBQWIsRUFBZ0JBLEtBQUlJLFdBQVd4QixNQUEvQixFQUF1Q29CLElBQXZDLEVBQTRDO0FBQzFDSSx5QkFBV0osRUFBWCxJQUFnQkksV0FBV0osRUFBWCxFQUFjakIsT0FBZCxDQUFzQixPQUF0QixFQUErQixFQUEvQixDQUFoQjtBQUNBLGtCQUFJcUIsV0FBV0osRUFBWCxFQUFjQyxPQUFkLENBQXNCLEdBQXRCLElBQTZCLENBQUMsQ0FBOUIsSUFBbUNHLFdBQVdKLEVBQVgsRUFBY0MsT0FBZCxDQUFzQixTQUF0QixNQUFxQyxDQUE1RSxFQUErRTtBQUM3RUcsMkJBQVdKLEVBQVgsSUFBZ0JwRixLQUFLK0MsTUFBTCxDQUFZLFlBQVosRUFBMEJ5QyxXQUFXSixFQUFYLENBQTFCLENBQWhCO0FBQ0Q7QUFDRjs7QUFFRCxnQkFBSW5GLEVBQUVxRSxPQUFGLENBQVVXLE9BQVYsRUFBbUJLLFVBQW5CLEtBQWtDckYsRUFBRXFFLE9BQUYsQ0FBVVksU0FBVixFQUFxQk0sVUFBckIsQ0FBdEMsRUFBd0U7QUFDdEVaO0FBQ0QsYUFGRCxNQUVPO0FBQ0wsb0JBQU8sSUFBSWpFLEtBQUosQ0FDTFgsS0FBSytDLE1BQUwsQ0FDRSxrRkFDQSx3Q0FGRixFQUdFNEIsTUFIRixDQURLLENBQVA7QUFPRDtBQUNGLFdBOUJELE1BOEJPO0FBQ0xFO0FBQ0Q7QUFDRixTQTFERDtBQTJERCxPQWpFRCxFQWlFRyxVQUFDdkMsR0FBRCxFQUFTO0FBQ1ZkLGlCQUFTYyxHQUFUO0FBQ0QsT0FuRUQ7QUFvRUQsS0FyRUQsTUFxRU87QUFDTGQ7QUFDRDtBQUNGLEdBbk1nQjtBQXFNakJrRSxnQ0FyTWlCLDBDQXFNY2xFLFFBck1kLEVBcU13QjtBQUN2QyxRQUFNMkIsU0FBUyxLQUFLcUIsa0JBQXBCO0FBQ0EsUUFBTTlELFVBQVUsS0FBS0ssUUFBckI7QUFDQSxRQUFNRyxXQUFXLEtBQUtELFNBQXRCOztBQUVBLFFBQUlQLFFBQVFpRixJQUFaLEVBQWtCO0FBQ2hCN0YsWUFBTTRFLFVBQU4sQ0FBaUIxQyxPQUFPQyxJQUFQLENBQVl2QixRQUFRaUYsSUFBcEIsQ0FBakIsRUFBNEMsVUFBQ0MsTUFBRCxFQUFTQyxXQUFULEVBQXlCO0FBQ25FLFlBQUksQ0FBQ25GLFFBQVFpRixJQUFSLENBQWFDLE1BQWIsRUFBcUJFLFVBQTFCLEVBQXNDO0FBQ3BDLGdCQUFPLElBQUluRixLQUFKLENBQ0xYLEtBQUsrQyxNQUFMLENBQVkscURBQVosRUFBbUU2QyxNQUFuRSxDQURLLENBQVA7QUFHRDtBQUNELFlBQUksQ0FBQ2xGLFFBQVFpRixJQUFSLENBQWFDLE1BQWIsRUFBcUJHLFFBQTFCLEVBQW9DO0FBQ2xDLGdCQUFPLElBQUlwRixLQUFKLENBQ0xYLEtBQUsrQyxNQUFMLENBQVksbURBQVosRUFBaUU2QyxNQUFqRSxDQURLLENBQVA7QUFHRDtBQUNELFlBQUksQ0FBQ2xGLFFBQVFpRixJQUFSLENBQWFDLE1BQWIsRUFBcUJJLElBQTFCLEVBQWdDO0FBQzlCLGdCQUFPLElBQUlyRixLQUFKLENBQ0xYLEtBQUsrQyxNQUFMLENBQVksK0NBQVosRUFBNkQ2QyxNQUE3RCxDQURLLENBQVA7QUFHRDtBQUNELFlBQUlsRixRQUFRaUYsSUFBUixDQUFhQyxNQUFiLEVBQXFCSyxNQUFyQixJQUErQixDQUFDaEcsRUFBRWlHLGFBQUYsQ0FBZ0J4RixRQUFRaUYsSUFBUixDQUFhQyxNQUFiLEVBQXFCSyxNQUFyQyxDQUFwQyxFQUFrRjtBQUNoRixnQkFBTyxJQUFJdEYsS0FBSixDQUNMWCxLQUFLK0MsTUFBTCxDQUFZLHdEQUFaLEVBQXNFNkMsTUFBdEUsQ0FESyxDQUFQO0FBR0Q7QUFDRCxZQUFJbEYsUUFBUWlGLElBQVIsQ0FBYUMsTUFBYixFQUFxQkssTUFBckIsWUFBdUNyRSxLQUEzQyxFQUFrRDtBQUNoRCxnQkFBTyxJQUFJakIsS0FBSixDQUNMWCxLQUFLK0MsTUFBTCxDQUFZLHNFQUFaLEVBQW9GNkMsTUFBcEYsQ0FESyxDQUFQO0FBR0Q7O0FBRUQsWUFBSXRDLFFBQVF0RCxLQUFLK0MsTUFBTCxDQUNWLDRGQURVLEVBRVY3QixRQUZVLEVBR1YwRSxPQUFPTyxXQUFQLEVBSFUsQ0FBWjtBQUtBaEQsZUFBT0ksT0FBUCxDQUFlRCxLQUFmLEVBQXNCLFVBQUNoQixHQUFELEVBQU1DLE1BQU4sRUFBaUI7QUFDckMsY0FBSUQsR0FBSixFQUFTO0FBQ1B1RCx3QkFBWXZELEdBQVo7QUFDQTtBQUNEOztBQUVELGNBQU04RCxZQUFZLFNBQVpBLFNBQVksR0FBTTtBQUN0QixnQkFBTUMsWUFBWSxFQUFsQjtBQUNBLGdCQUFJM0YsUUFBUWlGLElBQVIsQ0FBYUMsTUFBYixFQUFxQkssTUFBekIsRUFBaUM7QUFDL0JqRSxxQkFBT0MsSUFBUCxDQUFZdkIsUUFBUWlGLElBQVIsQ0FBYUMsTUFBYixFQUFxQkssTUFBakMsRUFBeUMvRCxPQUF6QyxDQUFpRCxVQUFDb0UsS0FBRCxFQUFXO0FBQzFERCwwQkFBVXZELElBQVYsQ0FBZTlDLEtBQUsrQyxNQUFMLENBQ2IsT0FEYSxFQUVidUQsS0FGYSxFQUdiNUYsUUFBUWlGLElBQVIsQ0FBYUMsTUFBYixFQUFxQkssTUFBckIsQ0FBNEJLLEtBQTVCLENBSGEsQ0FBZjtBQUtELGVBTkQ7QUFPRDtBQUNEaEQsb0JBQVF0RCxLQUFLK0MsTUFBTCxDQUNOLHlGQURNLEVBRU42QyxNQUZNLEVBR05TLFVBQVVyQixRQUFWLEVBSE0sRUFJTnRFLFFBQVFpRixJQUFSLENBQWFDLE1BQWIsRUFBcUJFLFVBSmYsRUFLTnBGLFFBQVFpRixJQUFSLENBQWFDLE1BQWIsRUFBcUJHLFFBTGYsRUFNTnJGLFFBQVFpRixJQUFSLENBQWFDLE1BQWIsRUFBcUJJLElBTmYsQ0FBUjtBQVFBN0MsbUJBQU9JLE9BQVAsQ0FBZUQsS0FBZixFQUFzQixVQUFDRyxJQUFELEVBQVU7QUFDOUJvQywwQkFBWXBDLElBQVo7QUFDRCxhQUZEO0FBR0QsV0F0QkQ7O0FBd0JBLGNBQUlsQixPQUFPd0IsSUFBUCxJQUFleEIsT0FBT3dCLElBQVAsQ0FBWUMsTUFBWixHQUFxQixDQUF4QyxFQUEyQztBQUN6QyxnQkFBTXVDLGNBQWM3RixRQUFRaUYsSUFBUixDQUFhQyxNQUFiLEVBQXFCRyxRQUF6QztBQUNBLGdCQUFNUyxpQkFBaUJqRSxPQUFPd0IsSUFBUCxDQUFZLENBQVosRUFBZWdDLFFBQXRDOztBQUVBLGdCQUFNVSxVQUFVL0YsUUFBUWlGLElBQVIsQ0FBYUMsTUFBYixFQUFxQkksSUFBckM7QUFDQSxnQkFBTVUsYUFBYW5FLE9BQU93QixJQUFQLENBQVksQ0FBWixFQUFlNEMsSUFBbEM7O0FBRUEsZ0JBQUlDLGdCQUFnQmxHLFFBQVFpRixJQUFSLENBQWFDLE1BQWIsRUFBcUJFLFVBQXpDO0FBQ0FjLDRCQUFnQkEsY0FBY3pDLE9BQWQsQ0FBc0IsT0FBdEIsRUFBK0IsRUFBL0IsQ0FBaEI7QUFDQSxnQkFBSXlDLGNBQWN2QixPQUFkLENBQXNCLEdBQXRCLElBQTZCLENBQUMsQ0FBOUIsSUFBbUN1QixjQUFjdkIsT0FBZCxDQUFzQixTQUF0QixNQUFxQyxDQUE1RSxFQUErRTtBQUM3RXVCLDhCQUFnQjVHLEtBQUsrQyxNQUFMLENBQVksWUFBWixFQUEwQjZELGFBQTFCLENBQWhCO0FBQ0Q7QUFDRCxnQkFBSUMsbUJBQW1CdEUsT0FBT3dCLElBQVAsQ0FBWSxDQUFaLEVBQWUrQyxXQUF0QztBQUNBRCwrQkFBbUJBLGlCQUFpQjFDLE9BQWpCLENBQXlCLE9BQXpCLEVBQWtDLEVBQWxDLENBQW5CO0FBQ0EsZ0JBQUkwQyxpQkFBaUJ4QixPQUFqQixDQUF5QixHQUF6QixJQUFnQyxDQUFDLENBQWpDLElBQXNDd0IsaUJBQWlCeEIsT0FBakIsQ0FBeUIsU0FBekIsTUFBd0MsQ0FBbEYsRUFBcUY7QUFDbkZ3QixpQ0FBbUI3RyxLQUFLK0MsTUFBTCxDQUFZLFlBQVosRUFBMEI4RCxnQkFBMUIsQ0FBbkI7QUFDRDs7QUFFRCxnQkFBTVIsWUFBWTNGLFFBQVFpRixJQUFSLENBQWFDLE1BQWIsRUFBcUJLLE1BQXJCLEdBQThCdkYsUUFBUWlGLElBQVIsQ0FBYUMsTUFBYixFQUFxQkssTUFBbkQsR0FBNEQsRUFBOUU7QUFDQSxnQkFBTWMsZUFBZS9FLE9BQU9DLElBQVAsQ0FBWW9FLFNBQVosQ0FBckI7QUFDQSxnQkFBTVcsaUJBQWlCL0csRUFBRWtGLE1BQUYsQ0FBU2tCLFNBQVQsQ0FBdkI7QUFDQSxpQkFBSyxJQUFJakIsSUFBSSxDQUFiLEVBQWdCQSxJQUFJNEIsZUFBZWhELE1BQW5DLEVBQTJDb0IsR0FBM0MsRUFBZ0Q7QUFDOUM0Qiw2QkFBZTVCLENBQWYsSUFBb0I0QixlQUFlNUIsQ0FBZixFQUFrQmpCLE9BQWxCLENBQTBCLE9BQTFCLEVBQW1DLEVBQW5DLENBQXBCO0FBQ0Esa0JBQUk2QyxlQUFlNUIsQ0FBZixFQUFrQkMsT0FBbEIsQ0FBMEIsR0FBMUIsSUFBaUMsQ0FBQyxDQUFsQyxJQUF1QzJCLGVBQWU1QixDQUFmLEVBQWtCQyxPQUFsQixDQUEwQixTQUExQixNQUF5QyxDQUFwRixFQUF1RjtBQUNyRjJCLCtCQUFlNUIsQ0FBZixJQUFvQnBGLEtBQUsrQyxNQUFMLENBQVksWUFBWixFQUEwQmlFLGVBQWU1QixDQUFmLENBQTFCLENBQXBCO0FBQ0Q7QUFDRjtBQUNELGdCQUFNNkIsc0JBQXNCMUUsT0FBT3dCLElBQVAsQ0FBWSxDQUFaLEVBQWVtRCxjQUEzQztBQUNBLGdCQUFNQyxzQkFBc0I1RSxPQUFPd0IsSUFBUCxDQUFZLENBQVosRUFBZXFELGNBQTNDO0FBQ0EsaUJBQUssSUFBSWhDLE1BQUksQ0FBYixFQUFnQkEsTUFBSStCLG9CQUFvQm5ELE1BQXhDLEVBQWdEb0IsS0FBaEQsRUFBcUQ7QUFDbkQrQixrQ0FBb0IvQixHQUFwQixJQUF5QitCLG9CQUFvQi9CLEdBQXBCLEVBQXVCakIsT0FBdkIsQ0FBK0IsT0FBL0IsRUFBd0MsRUFBeEMsQ0FBekI7QUFDQSxrQkFBSWdELG9CQUFvQi9CLEdBQXBCLEVBQXVCQyxPQUF2QixDQUErQixHQUEvQixJQUFzQyxDQUFDLENBQXZDLElBQTRDOEIsb0JBQW9CL0IsR0FBcEIsRUFBdUJDLE9BQXZCLENBQStCLFNBQS9CLE1BQThDLENBQTlGLEVBQWlHO0FBQy9GOEIsb0NBQW9CL0IsR0FBcEIsSUFBeUJwRixLQUFLK0MsTUFBTCxDQUFZLFlBQVosRUFBMEJvRSxvQkFBb0IvQixHQUFwQixDQUExQixDQUF6QjtBQUNEO0FBQ0Y7O0FBRUQsZ0JBQUltQixnQkFBZ0JDLGNBQWhCLElBQ0ZDLFlBQVlDLFVBRFYsSUFFRkUsa0JBQWtCQyxnQkFGaEIsSUFHRjVHLEVBQUVxRSxPQUFGLENBQVV5QyxZQUFWLEVBQXdCRSxtQkFBeEIsQ0FIRSxJQUlGaEgsRUFBRXFFLE9BQUYsQ0FBVTBDLGNBQVYsRUFBMEJHLG1CQUExQixDQUpGLEVBSWtEO0FBQ2hEdEI7QUFDRCxhQU5ELE1BTU87QUFDTE87QUFDRDtBQUNGLFdBN0NELE1BNkNPO0FBQ0xBO0FBQ0Q7QUFDRixTQTlFRDtBQStFRCxPQS9HRCxFQStHRyxVQUFDOUQsR0FBRCxFQUFTO0FBQ1ZkLGlCQUFTYyxHQUFUO0FBQ0QsT0FqSEQ7QUFrSEQsS0FuSEQsTUFtSE87QUFDTGQ7QUFDRDtBQUNGLEdBaFVnQjtBQWtVakI2RixpQ0FsVWlCLDJDQWtVZTdGLFFBbFVmLEVBa1V5QjtBQUN4QyxRQUFNMkIsU0FBUyxLQUFLcUIsa0JBQXBCO0FBQ0EsUUFBTTlELFVBQVUsS0FBS0ssUUFBckI7QUFDQSxRQUFNRyxXQUFXLEtBQUtELFNBQXRCOztBQUVBLFFBQUlQLFFBQVE0RyxJQUFaLEVBQWtCO0FBQ2hCeEgsWUFBTTRFLFVBQU4sQ0FBaUIxQyxPQUFPQyxJQUFQLENBQVl2QixRQUFRNEcsSUFBcEIsQ0FBakIsRUFBNEMsVUFBQ0MsTUFBRCxFQUFTQyxXQUFULEVBQXlCO0FBQ25FLFlBQUksQ0FBQzlHLFFBQVE0RyxJQUFSLENBQWFDLE1BQWIsRUFBcUJFLFdBQTFCLEVBQXVDO0FBQ3JDLGdCQUFPLElBQUk5RyxLQUFKLENBQ0xYLEtBQUsrQyxNQUFMLENBQVksc0RBQVosRUFBb0V3RSxNQUFwRSxDQURLLENBQVA7QUFHRDtBQUNELFlBQUksRUFBRTdHLFFBQVE0RyxJQUFSLENBQWFDLE1BQWIsRUFBcUJFLFdBQXJCLFlBQTRDN0YsS0FBOUMsQ0FBSixFQUEwRDtBQUN4RCxnQkFBTyxJQUFJakIsS0FBSixDQUNMWCxLQUFLK0MsTUFBTCxDQUFZLDREQUFaLEVBQTBFd0UsTUFBMUUsQ0FESyxDQUFQO0FBR0Q7QUFDRCxZQUFJN0csUUFBUTRHLElBQVIsQ0FBYUMsTUFBYixFQUFxQkUsV0FBckIsQ0FBaUN6RCxNQUFqQyxHQUEwQyxDQUE5QyxFQUFpRDtBQUMvQyxnQkFBTyxJQUFJckQsS0FBSixDQUNMWCxLQUFLK0MsTUFBTCxDQUFZLGlFQUFaLEVBQStFd0UsTUFBL0UsQ0FESyxDQUFQO0FBR0Q7QUFDRCxZQUFJLENBQUM3RyxRQUFRNEcsSUFBUixDQUFhQyxNQUFiLEVBQXFCRyxLQUExQixFQUFpQztBQUMvQixnQkFBTyxJQUFJL0csS0FBSixDQUNMWCxLQUFLK0MsTUFBTCxDQUFZLGlEQUFaLEVBQStEd0UsTUFBL0QsQ0FESyxDQUFQO0FBR0Q7QUFDRCxZQUFJLENBQUM3RyxRQUFRNEcsSUFBUixDQUFhQyxNQUFiLEVBQXFCSSxLQUExQixFQUFpQztBQUMvQixnQkFBTyxJQUFJaEgsS0FBSixDQUNMWCxLQUFLK0MsTUFBTCxDQUFZLGlEQUFaLEVBQStEd0UsTUFBL0QsQ0FESyxDQUFQO0FBR0Q7QUFDRCxZQUFJLENBQUM3RyxRQUFRNEcsSUFBUixDQUFhQyxNQUFiLEVBQXFCSyxRQUExQixFQUFvQztBQUNsQ2xILGtCQUFRNEcsSUFBUixDQUFhQyxNQUFiLEVBQXFCSyxRQUFyQixHQUFnQyxJQUFoQztBQUNEOztBQUVELFlBQUl0RSxRQUFRdEQsS0FBSytDLE1BQUwsQ0FDViw4RkFEVSxFQUVWN0IsUUFGVSxFQUdWcUcsT0FBT3BCLFdBQVAsRUFIVSxDQUFaO0FBS0FoRCxlQUFPSSxPQUFQLENBQWVELEtBQWYsRUFBc0IsVUFBQ2hCLEdBQUQsRUFBTUMsTUFBTixFQUFpQjtBQUNyQyxjQUFJRCxHQUFKLEVBQVM7QUFDUGtGLHdCQUFZbEYsR0FBWjtBQUNBO0FBQ0Q7O0FBRUQsY0FBTXVGLFlBQVksU0FBWkEsU0FBWSxHQUFNO0FBQ3RCdkUsb0JBQVF0RCxLQUFLK0MsTUFBTCxDQUNOLHVEQURNLEVBRU53RSxNQUZNLEVBR043RyxRQUFRNEcsSUFBUixDQUFhQyxNQUFiLEVBQXFCRSxXQUFyQixDQUFpQ3pDLFFBQWpDLEVBSE0sRUFJTnRFLFFBQVE0RyxJQUFSLENBQWFDLE1BQWIsRUFBcUJHLEtBSmYsRUFLTmhILFFBQVE0RyxJQUFSLENBQWFDLE1BQWIsRUFBcUJJLEtBTGYsQ0FBUjtBQU9BLGdCQUFJakgsUUFBUTRHLElBQVIsQ0FBYUMsTUFBYixFQUFxQk8sU0FBekIsRUFBb0N4RSxTQUFTdEQsS0FBSytDLE1BQUwsQ0FBWSxlQUFaLEVBQTZCckMsUUFBUTRHLElBQVIsQ0FBYUMsTUFBYixFQUFxQk8sU0FBbEQsQ0FBVDtBQUNwQ3hFLHFCQUFTdEQsS0FBSytDLE1BQUwsQ0FBWSxlQUFaLEVBQTZCckMsUUFBUTRHLElBQVIsQ0FBYUMsTUFBYixFQUFxQkssUUFBbEQsQ0FBVDs7QUFFQXpFLG1CQUFPSSxPQUFQLENBQWVELEtBQWYsRUFBc0IsVUFBQ0csSUFBRCxFQUFVO0FBQzlCK0QsMEJBQVkvRCxJQUFaO0FBQ0QsYUFGRDtBQUdELFdBZEQ7O0FBZ0JBLGNBQUlsQixPQUFPd0IsSUFBUCxJQUFleEIsT0FBT3dCLElBQVAsQ0FBWUMsTUFBWixHQUFxQixDQUF4QyxFQUEyQztBQUN6QyxnQkFBTStELGFBQWFySCxRQUFRNEcsSUFBUixDQUFhQyxNQUFiLEVBQXFCRSxXQUF4QztBQUNBLGlCQUFLLElBQUlyQyxJQUFJLENBQWIsRUFBZ0JBLElBQUkyQyxXQUFXL0QsTUFBL0IsRUFBdUNvQixHQUF2QyxFQUE0QztBQUMxQzJDLHlCQUFXM0MsQ0FBWCxJQUFnQjJDLFdBQVczQyxDQUFYLEVBQWNqQixPQUFkLENBQXNCLE9BQXRCLEVBQStCLEVBQS9CLENBQWhCO0FBQ0Esa0JBQUk0RCxXQUFXM0MsQ0FBWCxFQUFjQyxPQUFkLENBQXNCLEdBQXRCLElBQTZCLENBQUMsQ0FBOUIsSUFBbUMwQyxXQUFXM0MsQ0FBWCxFQUFjQyxPQUFkLENBQXNCLFNBQXRCLE1BQXFDLENBQTVFLEVBQStFO0FBQzdFMEMsMkJBQVczQyxDQUFYLElBQWdCcEYsS0FBSytDLE1BQUwsQ0FBWSxZQUFaLEVBQTBCZ0YsV0FBVzNDLENBQVgsQ0FBMUIsQ0FBaEI7QUFDRDtBQUNGO0FBQ0QsZ0JBQU1zQyxRQUFRaEgsUUFBUTRHLElBQVIsQ0FBYUMsTUFBYixFQUFxQkcsS0FBckIsQ0FBMkJ2QixXQUEzQixFQUFkO0FBQ0EsZ0JBQUl3QixRQUFRakgsUUFBUTRHLElBQVIsQ0FBYUMsTUFBYixFQUFxQkksS0FBakM7QUFDQUEsb0JBQVFBLE1BQU14RCxPQUFOLENBQWMsT0FBZCxFQUF1QixFQUF2QixDQUFSO0FBQ0EsZ0JBQUl3RCxNQUFNdEMsT0FBTixDQUFjLEdBQWQsSUFBcUIsQ0FBQyxDQUF0QixJQUEyQnNDLE1BQU10QyxPQUFOLENBQWMsU0FBZCxNQUE2QixDQUE1RCxFQUErRDtBQUM3RHNDLHNCQUFRM0gsS0FBSytDLE1BQUwsQ0FBWSxZQUFaLEVBQTBCNEUsS0FBMUIsQ0FBUjtBQUNEO0FBQ0QsZ0JBQUlHLFlBQVlwSCxRQUFRNEcsSUFBUixDQUFhQyxNQUFiLEVBQXFCTyxTQUFyQztBQUNBLGdCQUFJQSxTQUFKLEVBQWVBLFlBQVlBLFVBQVUzQixXQUFWLEVBQVosQ0FBZixLQUNLMkIsWUFBWSxJQUFaO0FBQ0wsZ0JBQUlGLFdBQVdsSCxRQUFRNEcsSUFBUixDQUFhQyxNQUFiLEVBQXFCSyxRQUFwQztBQUNBLGdCQUFJQSxRQUFKLEVBQWNBLFdBQVdBLFNBQVN6RCxPQUFULENBQWlCLE9BQWpCLEVBQTBCLEVBQTFCLENBQVg7O0FBRWQsaUJBQUssSUFBSWlCLE1BQUksQ0FBYixFQUFnQkEsTUFBSTdDLE9BQU93QixJQUFQLENBQVlDLE1BQWhDLEVBQXdDb0IsS0FBeEMsRUFBNkM7QUFDM0Msa0JBQU0rQixzQkFBc0I1RSxPQUFPd0IsSUFBUCxDQUFZcUIsR0FBWixFQUFlZ0MsY0FBM0M7QUFDQSxtQkFBSyxJQUFJWSxJQUFJLENBQWIsRUFBZ0JBLElBQUliLG9CQUFvQm5ELE1BQXhDLEVBQWdEZ0UsR0FBaEQsRUFBcUQ7QUFDbkRiLG9DQUFvQmEsQ0FBcEIsSUFBeUJiLG9CQUFvQmEsQ0FBcEIsRUFBdUI3RCxPQUF2QixDQUErQixPQUEvQixFQUF3QyxFQUF4QyxDQUF6QjtBQUNBLG9CQUFJZ0Qsb0JBQW9CYSxDQUFwQixFQUF1QjNDLE9BQXZCLENBQStCLEdBQS9CLElBQXNDLENBQUMsQ0FBdkMsSUFBNEM4QixvQkFBb0JhLENBQXBCLEVBQXVCM0MsT0FBdkIsQ0FBK0IsU0FBL0IsTUFBOEMsQ0FBOUYsRUFBaUc7QUFDL0Y4QixzQ0FBb0JhLENBQXBCLElBQXlCaEksS0FBSytDLE1BQUwsQ0FBWSxZQUFaLEVBQTBCb0Usb0JBQW9CYSxDQUFwQixDQUExQixDQUF6QjtBQUNEO0FBQ0Y7O0FBRUQsa0JBQU1DLGtCQUFrQjFGLE9BQU93QixJQUFQLENBQVlxQixHQUFaLEVBQWU4QyxVQUF2QztBQUNBLGtCQUFJQyxrQkFBa0I1RixPQUFPd0IsSUFBUCxDQUFZcUIsR0FBWixFQUFlZ0QsVUFBckM7QUFDQUQsZ0NBQWtCQSxnQkFBZ0JoRSxPQUFoQixDQUF3QixPQUF4QixFQUFpQyxFQUFqQyxDQUFsQjtBQUNBLGtCQUFJZ0UsZ0JBQWdCOUMsT0FBaEIsQ0FBd0IsR0FBeEIsSUFBK0IsQ0FBQyxDQUFoQyxJQUFxQzhDLGdCQUFnQjlDLE9BQWhCLENBQXdCLFNBQXhCLE1BQXVDLENBQWhGLEVBQW1GO0FBQ2pGOEMsa0NBQWtCbkksS0FBSytDLE1BQUwsQ0FBWSxZQUFaLEVBQTBCb0YsZUFBMUIsQ0FBbEI7QUFDRDs7QUFFRCxrQkFBTUUsa0JBQWtCOUYsT0FBT3dCLElBQVAsQ0FBWXFCLEdBQVosRUFBZWtELFVBQXZDOztBQUVBLGtCQUFJQyxpQkFBaUJoRyxPQUFPd0IsSUFBUCxDQUFZcUIsR0FBWixFQUFld0MsUUFBcEM7QUFDQSxrQkFBSVcsY0FBSixFQUFvQkEsaUJBQWlCQSxlQUFlcEUsT0FBZixDQUF1QixPQUF2QixFQUFnQyxFQUFoQyxDQUFqQjs7QUFFcEIsa0JBQUl1RCxVQUFVTyxlQUFWLElBQ0ZOLFVBQVVRLGVBRFIsSUFFRkwsY0FBY08sZUFGWixJQUdGVCxhQUFhVyxjQUhYLElBSUZ0SSxFQUFFcUUsT0FBRixDQUFVeUQsVUFBVixFQUFzQlosbUJBQXRCLENBSkYsRUFJOEM7QUFDNUNLO0FBQ0E7QUFDRDtBQUNGOztBQUVESztBQUNELFdBcERELE1Bb0RPO0FBQ0xBO0FBQ0Q7QUFDRixTQTdFRDtBQThFRCxPQWpIRCxFQWlIRyxVQUFDdkYsR0FBRCxFQUFTO0FBQ1ZkLGlCQUFTYyxHQUFUO0FBQ0QsT0FuSEQ7QUFvSEQsS0FySEQsTUFxSE87QUFDTGQ7QUFDRDtBQUNGLEdBL2JnQjtBQWljakJnSCxhQWpjaUIsdUJBaWNMckYsTUFqY0ssRUFpY0c7QUFBQTs7QUFDbEIsUUFBTXNGLDBCQUEwQnhJLEVBQUV3QyxTQUFGLENBQVksS0FBS3RCLFdBQWpCLENBQWhDOztBQUVBLFNBQUtDLE9BQUwsR0FBZStCLE1BQWY7QUFDQSxTQUFLcUIsa0JBQUwsR0FBMEIsSUFBSXRFLElBQUl3QyxNQUFSLENBQWUrRix1QkFBZixDQUExQjs7QUFFQTtBQUNBekcsV0FBT0MsSUFBUCxDQUFZLEtBQUtqQixPQUFqQixFQUEwQmtCLE9BQTFCLENBQWtDLFVBQUNrRCxDQUFELEVBQU87QUFDdkMsWUFBS3BFLE9BQUwsQ0FBYW9FLENBQWIsRUFBZ0JzRCxXQUFoQixDQUE0QnhJLEdBQTVCLEdBQWtDLE1BQUtrQixPQUF2QztBQUNBLFlBQUtKLE9BQUwsQ0FBYW9FLENBQWIsRUFBZ0JzRCxXQUFoQixDQUE0QkMsaUJBQTVCLEdBQWdELE1BQUtuRSxrQkFBckQ7QUFDRCxLQUhEO0FBSUQsR0E1Y2dCO0FBOGNqQm9FLFNBOWNpQixtQkE4Y1RwSCxRQTljUyxFQThjQztBQUFBOztBQUNoQixRQUFNcUgsMEJBQTBCLFNBQTFCQSx1QkFBMEIsQ0FBQ3ZHLEdBQUQsRUFBUztBQUN2QyxVQUFJQSxHQUFKLEVBQVM7QUFDUGQsaUJBQVNjLEdBQVQ7QUFDQTtBQUNEO0FBQ0RkLGVBQVNjLEdBQVQ7QUFDRCxLQU5EOztBQVFBLFFBQU13Ryx5QkFBeUIsU0FBU3RJLENBQVQsQ0FBVzhCLEdBQVgsRUFBZ0I7QUFDN0MsVUFBSUEsR0FBSixFQUFTO0FBQ1BkLGlCQUFTYyxHQUFUO0FBQ0E7QUFDRDtBQUNELFdBQUsrRSwrQkFBTCxDQUFxQ3dCLHdCQUF3QkUsSUFBeEIsQ0FBNkIsSUFBN0IsQ0FBckM7QUFDRCxLQU5EOztBQVFBLFFBQU1DLHFCQUFxQixTQUFTeEksQ0FBVCxDQUFXOEIsR0FBWCxFQUFnQjtBQUN6QyxVQUFJQSxHQUFKLEVBQVM7QUFDUGQsaUJBQVNjLEdBQVQ7QUFDQTtBQUNEO0FBQ0QsV0FBS29ELDhCQUFMLENBQW9Db0QsdUJBQXVCQyxJQUF2QixDQUE0QixJQUE1QixDQUFwQztBQUNELEtBTkQ7O0FBUUEsUUFBTUUsYUFBYSxTQUFTekksQ0FBVCxDQUFXOEIsR0FBWCxFQUFnQjtBQUNqQyxVQUFJQSxHQUFKLEVBQVM7QUFDUGQsaUJBQVNjLEdBQVQ7QUFDQTtBQUNEO0FBQ0QsV0FBS2tHLFdBQUwsQ0FBaUIsSUFBSXRJLElBQUl3QyxNQUFSLENBQWUsS0FBS3ZCLFdBQXBCLENBQWpCO0FBQ0EsV0FBS29ELDBCQUFMLENBQWdDeUUsbUJBQW1CRCxJQUFuQixDQUF3QixJQUF4QixDQUFoQztBQUNELEtBUEQ7O0FBU0EsUUFBSSxLQUFLOUgsU0FBTCxJQUFrQixLQUFLRixRQUFMLENBQWN5QyxjQUFwQyxFQUFvRDtBQUNsRCxXQUFLUCxnQkFBTCxDQUFzQmdHLFdBQVdGLElBQVgsQ0FBZ0IsSUFBaEIsQ0FBdEI7QUFDRCxLQUZELE1BRU87QUFDTEUsaUJBQVduSCxJQUFYLENBQWdCLElBQWhCO0FBQ0Q7QUFDRixHQXJmZ0I7QUF1ZmpCb0gsV0F2ZmlCLHFCQXVmUEMsU0F2Zk8sRUF1ZklDLFdBdmZKLEVBdWZpQjVILFFBdmZqQixFQXVmMkI7QUFDMUMsUUFBSSxDQUFDMkgsU0FBRCxJQUFjLE9BQVFBLFNBQVIsS0FBdUIsUUFBekMsRUFBbUQ7QUFDakQsWUFBTyxJQUFJeEksS0FBSixDQUFVLG1DQUFWLENBQVA7QUFDRDs7QUFFRFAsWUFBUWlKLHFCQUFSLENBQThCRCxXQUE5Qjs7QUFFQSxRQUFNRSxpQkFBaUI7QUFDckJDLFlBQU1KLFNBRGU7QUFFckJLLGNBQVFKLFdBRmE7QUFHckJsSSxnQkFBVSxLQUFLRCxTQUhNO0FBSXJCMEgseUJBQW1CLEtBQUtuRSxrQkFKSDtBQUtyQnRFLFdBQUssS0FBS2tCLE9BTFc7QUFNckJxSSx1QkFBaUIsS0FBS0MsU0FBTCxDQUFlWCxJQUFmLENBQW9CLElBQXBCLEVBQTBCSSxTQUExQixDQU5JO0FBT3JCUCxlQUFTLEtBQUtBLE9BQUwsQ0FBYUcsSUFBYixDQUFrQixJQUFsQixDQVBZO0FBUXJCWSwrQkFBeUIsS0FBSzVJLFFBQUwsQ0FBYzRJLHVCQVJsQjtBQVNyQkMsaUJBQVcsS0FBSzdJLFFBQUwsQ0FBYzZJLFNBVEo7QUFVckJDLDhCQUF3QixLQUFLOUksUUFBTCxDQUFjOEk7QUFWakIsS0FBdkI7O0FBYUEsV0FBUSxLQUFLN0ksT0FBTCxDQUFhbUksU0FBYixJQUEwQixLQUFLN0gsZUFBTCxDQUFxQmdJLGNBQXJCLEVBQXFDOUgsUUFBckMsQ0FBbEM7QUFDRCxHQTVnQmdCO0FBOGdCakJrSSxXQTlnQmlCLHFCQThnQlBQLFNBOWdCTyxFQThnQkk7QUFDbkIsV0FBTyxLQUFLbkksT0FBTCxDQUFhbUksU0FBYixLQUEyQixJQUFsQztBQUNELEdBaGhCZ0I7QUFraEJqQlcsT0FsaEJpQixpQkFraEJYdEksUUFsaEJXLEVBa2hCRDtBQUFBOztBQUNkQSxlQUFXQSxZQUFZbEIsSUFBdkI7O0FBRUEsUUFBSSxDQUFDLEtBQUtjLE9BQVYsRUFBbUI7QUFDakJJO0FBQ0E7QUFDRDtBQUNELFNBQUtKLE9BQUwsQ0FBYXVDLFFBQWIsQ0FBc0IsVUFBQ3JCLEdBQUQsRUFBUztBQUM3QixVQUFJLENBQUMsT0FBS2tDLGtCQUFWLEVBQThCO0FBQzVCaEQsaUJBQVNjLEdBQVQ7QUFDQTtBQUNEO0FBQ0QsYUFBS2tDLGtCQUFMLENBQXdCYixRQUF4QixDQUFpQyxVQUFDb0csSUFBRCxFQUFVO0FBQ3pDdkksaUJBQVNjLE9BQU95SCxJQUFoQjtBQUNELE9BRkQ7QUFHRCxLQVJEO0FBU0Q7QUFsaUJnQixDQUFuQjs7QUFxaUJBQyxPQUFPQyxPQUFQLEdBQWlCMUosTUFBakIiLCJmaWxlIjoiYXBvbGxvLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXN5bmMgPSByZXF1aXJlKCdhc3luYycpO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbmNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbmNvbnN0IGNxbCA9IHJlcXVpcmUoJ2RzZS1kcml2ZXInKTtcblxuY29uc3QgQmFzZU1vZGVsID0gcmVxdWlyZSgnLi9iYXNlX21vZGVsJyk7XG5jb25zdCBzY2hlbWVyID0gcmVxdWlyZSgnLi9hcG9sbG9fc2NoZW1lcicpO1xuXG5jb25zdCBERUZBVUxUX1JFUExJQ0FUSU9OX0ZBQ1RPUiA9IDE7XG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB7fTtcblxuY29uc3QgQXBvbGxvID0gZnVuY3Rpb24gZihjb25uZWN0aW9uLCBvcHRpb25zKSB7XG4gIGlmICghY29ubmVjdGlvbikgdGhyb3cgKG5ldyBFcnJvcignRGF0YSBjb25uZWN0aW9uIGNvbmZpZ3VyYXRpb24gdW5kZWZpbmVkJykpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGlmICghb3B0aW9ucy5kZWZhdWx0UmVwbGljYXRpb25TdHJhdGVneSkge1xuICAgIG9wdGlvbnMuZGVmYXVsdFJlcGxpY2F0aW9uU3RyYXRlZ3kgPSB7XG4gICAgICBjbGFzczogJ1NpbXBsZVN0cmF0ZWd5JyxcbiAgICAgIHJlcGxpY2F0aW9uX2ZhY3RvcjogREVGQVVMVF9SRVBMSUNBVElPTl9GQUNUT1IsXG4gICAgfTtcbiAgfVxuXG4gIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICB0aGlzLl9tb2RlbHMgPSB7fTtcbiAgdGhpcy5fa2V5c3BhY2UgPSBjb25uZWN0aW9uLmtleXNwYWNlO1xuICB0aGlzLl9jb25uZWN0aW9uID0gY29ubmVjdGlvbjtcbiAgdGhpcy5fY2xpZW50ID0gbnVsbDtcbn07XG5cbkFwb2xsby5wcm90b3R5cGUgPSB7XG5cbiAgX2dlbmVyYXRlX21vZGVsKHByb3BlcnRpZXMsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgTW9kZWwgPSBmdW5jdGlvbiBmKC4uLmFyZ3MpIHtcbiAgICAgIEJhc2VNb2RlbC5hcHBseSh0aGlzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKSk7XG4gICAgfTtcblxuICAgIHV0aWwuaW5oZXJpdHMoTW9kZWwsIEJhc2VNb2RlbCk7XG5cbiAgICBPYmplY3Qua2V5cyhCYXNlTW9kZWwpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgTW9kZWxba2V5XSA9IEJhc2VNb2RlbFtrZXldO1xuICAgIH0pO1xuXG4gICAgTW9kZWwuX3NldF9wcm9wZXJ0aWVzKHByb3BlcnRpZXMpO1xuICAgIE1vZGVsLnN5bmNEZWZpbml0aW9uKChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpZiAoZXJyKSBjYWxsYmFjayhlcnIpO1xuICAgICAgICBlbHNlIGNhbGxiYWNrKG51bGwsIHJlc3VsdCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gTW9kZWw7XG4gIH0sXG5cbiAgX2dldF9zeXN0ZW1fY2xpZW50KCkge1xuICAgIGNvbnN0IGNvbm5lY3Rpb24gPSBfLmNsb25lRGVlcCh0aGlzLl9jb25uZWN0aW9uKTtcbiAgICBkZWxldGUgY29ubmVjdGlvbi5rZXlzcGFjZTtcblxuICAgIHJldHVybiBuZXcgY3FsLkNsaWVudChjb25uZWN0aW9uKTtcbiAgfSxcblxuICBfZ2VuZXJhdGVfcmVwbGljYXRpb25fdGV4dChyZXBsaWNhdGlvbk9wdGlvbikge1xuICAgIGlmICh0eXBlb2YgcmVwbGljYXRpb25PcHRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gcmVwbGljYXRpb25PcHRpb247XG4gICAgfVxuXG4gICAgY29uc3QgcHJvcGVydGllcyA9IFtdO1xuICAgIE9iamVjdC5rZXlzKHJlcGxpY2F0aW9uT3B0aW9uKS5mb3JFYWNoKChrKSA9PiB7XG4gICAgICBwcm9wZXJ0aWVzLnB1c2godXRpbC5mb3JtYXQoXCInJXMnOiAnJXMnXCIsIGssIHJlcGxpY2F0aW9uT3B0aW9uW2tdKSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdXRpbC5mb3JtYXQoJ3slc30nLCBwcm9wZXJ0aWVzLmpvaW4oJywnKSk7XG4gIH0sXG5cbiAgX2Fzc2VydF9rZXlzcGFjZShjYWxsYmFjaykge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMuX2dldF9zeXN0ZW1fY2xpZW50KCk7XG4gICAgY29uc3Qga2V5c3BhY2VOYW1lID0gdGhpcy5fY29ubmVjdGlvbi5rZXlzcGFjZTtcbiAgICBsZXQgcmVwbGljYXRpb25UZXh0ID0gJyc7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuX29wdGlvbnM7XG5cbiAgICBsZXQgcXVlcnkgPSB1dGlsLmZvcm1hdChcbiAgICAgIFwiU0VMRUNUICogRlJPTSBzeXN0ZW1fc2NoZW1hLmtleXNwYWNlcyBXSEVSRSBrZXlzcGFjZV9uYW1lID0gJyVzJztcIixcbiAgICAgIGtleXNwYWNlTmFtZVxuICAgICk7XG4gICAgY2xpZW50LmV4ZWN1dGUocXVlcnksIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNyZWF0ZUtleXNwYWNlID0gKCkgPT4ge1xuICAgICAgICByZXBsaWNhdGlvblRleHQgPSBzZWxmLl9nZW5lcmF0ZV9yZXBsaWNhdGlvbl90ZXh0KG9wdGlvbnMuZGVmYXVsdFJlcGxpY2F0aW9uU3RyYXRlZ3kpO1xuXG4gICAgICAgIHF1ZXJ5ID0gdXRpbC5mb3JtYXQoXG4gICAgICAgICAgJ0NSRUFURSBLRVlTUEFDRSBJRiBOT1QgRVhJU1RTIFwiJXNcIiBXSVRIIFJFUExJQ0FUSU9OID0gJXM7JyxcbiAgICAgICAgICBrZXlzcGFjZU5hbWUsXG4gICAgICAgICAgcmVwbGljYXRpb25UZXh0XG4gICAgICAgICk7XG4gICAgICAgIGNsaWVudC5leGVjdXRlKHF1ZXJ5LCAoZXJyMSwgcmVzdWx0MSkgPT4ge1xuICAgICAgICAgIGNsaWVudC5zaHV0ZG93bigoKSA9PiB7XG4gICAgICAgICAgICBjYWxsYmFjayhlcnIxLCByZXN1bHQxKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBhbHRlcktleXNwYWNlID0gKCkgPT4ge1xuICAgICAgICByZXBsaWNhdGlvblRleHQgPSBzZWxmLl9nZW5lcmF0ZV9yZXBsaWNhdGlvbl90ZXh0KG9wdGlvbnMuZGVmYXVsdFJlcGxpY2F0aW9uU3RyYXRlZ3kpO1xuXG4gICAgICAgIHF1ZXJ5ID0gdXRpbC5mb3JtYXQoXG4gICAgICAgICAgJ0FMVEVSIEtFWVNQQUNFIFwiJXNcIiBXSVRIIFJFUExJQ0FUSU9OID0gJXM7JyxcbiAgICAgICAgICBrZXlzcGFjZU5hbWUsXG4gICAgICAgICAgcmVwbGljYXRpb25UZXh0XG4gICAgICAgICk7XG4gICAgICAgIGNsaWVudC5leGVjdXRlKHF1ZXJ5LCAoZXJyMSwgcmVzdWx0MSkgPT4ge1xuICAgICAgICAgIGNsaWVudC5zaHV0ZG93bigoKSA9PiB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgY29uc29sZS53YXJuKCdXQVJOOiBLRVlTUEFDRSBBTFRFUkVEISBSdW4gdGhlIGBub2RldG9vbCByZXBhaXJgIGNvbW1hbmQgb24gZWFjaCBhZmZlY3RlZCBub2RlLicpO1xuICAgICAgICAgICAgY2FsbGJhY2soZXJyMSwgcmVzdWx0MSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgaWYgKHJlc3VsdC5yb3dzICYmIHJlc3VsdC5yb3dzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgZGJSZXBsaWNhdGlvbiA9IHJlc3VsdC5yb3dzWzBdLnJlcGxpY2F0aW9uO1xuXG4gICAgICAgIE9iamVjdC5rZXlzKGRiUmVwbGljYXRpb24pLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgIGlmIChrZXkgPT09ICdjbGFzcycpIGRiUmVwbGljYXRpb25ba2V5XSA9IGRiUmVwbGljYXRpb25ba2V5XS5yZXBsYWNlKCdvcmcuYXBhY2hlLmNhc3NhbmRyYS5sb2NhdG9yLicsICcnKTtcbiAgICAgICAgICBlbHNlIGRiUmVwbGljYXRpb25ba2V5XSA9IHBhcnNlSW50KGRiUmVwbGljYXRpb25ba2V5XSwgMTApO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBvcm1SZXBsaWNhdGlvbiA9IG9wdGlvbnMuZGVmYXVsdFJlcGxpY2F0aW9uU3RyYXRlZ3k7XG4gICAgICAgIE9iamVjdC5rZXlzKG9ybVJlcGxpY2F0aW9uKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICBpZiAoa2V5ID09PSAnY2xhc3MnKSBvcm1SZXBsaWNhdGlvbltrZXldID0gb3JtUmVwbGljYXRpb25ba2V5XS5yZXBsYWNlKCdvcmcuYXBhY2hlLmNhc3NhbmRyYS5sb2NhdG9yLicsICcnKTtcbiAgICAgICAgICBlbHNlIG9ybVJlcGxpY2F0aW9uW2tleV0gPSBwYXJzZUludChvcm1SZXBsaWNhdGlvbltrZXldLCAxMCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChfLmlzRXF1YWwoZGJSZXBsaWNhdGlvbiwgb3JtUmVwbGljYXRpb24pKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhbHRlcktleXNwYWNlKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNyZWF0ZUtleXNwYWNlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgX2Fzc2VydF91c2VyX2RlZmluZWRfdHlwZXMoY2FsbGJhY2spIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLl9kZWZpbmVfY29ubmVjdGlvbjtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5fb3B0aW9ucztcbiAgICBjb25zdCBrZXlzcGFjZSA9IHRoaXMuX2tleXNwYWNlO1xuXG4gICAgaWYgKG9wdGlvbnMudWR0cykge1xuICAgICAgYXN5bmMuZWFjaFNlcmllcyhPYmplY3Qua2V5cyhvcHRpb25zLnVkdHMpLCAodWR0S2V5LCB1ZHRDYWxsYmFjaykgPT4ge1xuICAgICAgICBsZXQgcXVlcnkgPSB1dGlsLmZvcm1hdChcbiAgICAgICAgICBcIlNFTEVDVCAqIEZST00gc3lzdGVtX3NjaGVtYS50eXBlcyBXSEVSRSBrZXlzcGFjZV9uYW1lID0gJyVzJyBBTkQgdHlwZV9uYW1lID0gJyVzJztcIixcbiAgICAgICAgICBrZXlzcGFjZSxcbiAgICAgICAgICB1ZHRLZXlcbiAgICAgICAgKTtcbiAgICAgICAgY2xpZW50LmV4ZWN1dGUocXVlcnksIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHVkdENhbGxiYWNrKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgY3JlYXRlVURUID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdWR0RmllbGRzID0gW107XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhvcHRpb25zLnVkdHNbdWR0S2V5XSkuZm9yRWFjaCgoZmllbGQpID0+IHtcbiAgICAgICAgICAgICAgdWR0RmllbGRzLnB1c2godXRpbC5mb3JtYXQoXG4gICAgICAgICAgICAgICAgJ1wiJXNcIiAlcycsXG4gICAgICAgICAgICAgICAgZmllbGQsXG4gICAgICAgICAgICAgICAgb3B0aW9ucy51ZHRzW3VkdEtleV1bZmllbGRdXG4gICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBxdWVyeSA9IHV0aWwuZm9ybWF0KFxuICAgICAgICAgICAgICAnQ1JFQVRFIFRZUEUgSUYgTk9UIEVYSVNUUyBcIiVzXCIgKCVzKTsnLFxuICAgICAgICAgICAgICB1ZHRLZXksXG4gICAgICAgICAgICAgIHVkdEZpZWxkcy50b1N0cmluZygpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY2xpZW50LmV4ZWN1dGUocXVlcnksIChlcnIxKSA9PiB7XG4gICAgICAgICAgICAgIHVkdENhbGxiYWNrKGVycjEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmIChyZXN1bHQucm93cyAmJiByZXN1bHQucm93cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCB1ZHRLZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucy51ZHRzW3VkdEtleV0pO1xuICAgICAgICAgICAgY29uc3QgdWR0VmFsdWVzID0gXy52YWx1ZXMob3B0aW9ucy51ZHRzW3VkdEtleV0pO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1ZHRWYWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgdWR0VmFsdWVzW2ldID0gdWR0VmFsdWVzW2ldLnJlcGxhY2UoL1tcXHNdL2csICcnKTtcbiAgICAgICAgICAgICAgaWYgKHVkdFZhbHVlc1tpXS5pbmRleE9mKCc8JykgPiAtMSAmJiB1ZHRWYWx1ZXNbaV0uaW5kZXhPZignZnJvemVuPCcpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgdWR0VmFsdWVzW2ldID0gdXRpbC5mb3JtYXQoJ2Zyb3plbjwlcz4nLCB1ZHRWYWx1ZXNbaV0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGZpZWxkTmFtZXMgPSByZXN1bHQucm93c1swXS5maWVsZF9uYW1lcztcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkVHlwZXMgPSByZXN1bHQucm93c1swXS5maWVsZF90eXBlcztcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmllbGRUeXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBmaWVsZFR5cGVzW2ldID0gZmllbGRUeXBlc1tpXS5yZXBsYWNlKC9bXFxzXS9nLCAnJyk7XG4gICAgICAgICAgICAgIGlmIChmaWVsZFR5cGVzW2ldLmluZGV4T2YoJzwnKSA+IC0xICYmIGZpZWxkVHlwZXNbaV0uaW5kZXhPZignZnJvemVuPCcpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgZmllbGRUeXBlc1tpXSA9IHV0aWwuZm9ybWF0KCdmcm96ZW48JXM+JywgZmllbGRUeXBlc1tpXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKF8uaXNFcXVhbCh1ZHRLZXlzLCBmaWVsZE5hbWVzKSAmJiBfLmlzRXF1YWwodWR0VmFsdWVzLCBmaWVsZFR5cGVzKSkge1xuICAgICAgICAgICAgICB1ZHRDYWxsYmFjaygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhyb3cgKG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICB1dGlsLmZvcm1hdChcbiAgICAgICAgICAgICAgICAgICdVc2VyIGRlZmluZWQgdHlwZSBcIiVzXCIgYWxyZWFkeSBleGlzdHMgYnV0IGRvZXMgbm90IG1hdGNoIHRoZSB1ZHQgZGVmaW5pdGlvbi4gJyArXG4gICAgICAgICAgICAgICAgICAnQ29uc2lkZXIgYWx0ZXJpbmcgb3IgZHJvcGluZyB0aGUgdHlwZS4nLFxuICAgICAgICAgICAgICAgICAgdWR0S2V5XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3JlYXRlVURUKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0sIChlcnIpID0+IHtcbiAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH1cbiAgfSxcblxuICBfYXNzZXJ0X3VzZXJfZGVmaW5lZF9mdW5jdGlvbnMoY2FsbGJhY2spIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLl9kZWZpbmVfY29ubmVjdGlvbjtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5fb3B0aW9ucztcbiAgICBjb25zdCBrZXlzcGFjZSA9IHRoaXMuX2tleXNwYWNlO1xuXG4gICAgaWYgKG9wdGlvbnMudWRmcykge1xuICAgICAgYXN5bmMuZWFjaFNlcmllcyhPYmplY3Qua2V5cyhvcHRpb25zLnVkZnMpLCAodWRmS2V5LCB1ZGZDYWxsYmFjaykgPT4ge1xuICAgICAgICBpZiAoIW9wdGlvbnMudWRmc1t1ZGZLZXldLnJldHVyblR5cGUpIHtcbiAgICAgICAgICB0aHJvdyAobmV3IEVycm9yKFxuICAgICAgICAgICAgdXRpbC5mb3JtYXQoJ05vIHJldHVyblR5cGUgZGVmaW5lZCBmb3IgdXNlciBkZWZpbmVkIGZ1bmN0aW9uOiAlcycsIHVkZktleSlcbiAgICAgICAgICApKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdGlvbnMudWRmc1t1ZGZLZXldLmxhbmd1YWdlKSB7XG4gICAgICAgICAgdGhyb3cgKG5ldyBFcnJvcihcbiAgICAgICAgICAgIHV0aWwuZm9ybWF0KCdObyBsYW5ndWFnZSBkZWZpbmVkIGZvciB1c2VyIGRlZmluZWQgZnVuY3Rpb246ICVzJywgdWRmS2V5KVxuICAgICAgICAgICkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghb3B0aW9ucy51ZGZzW3VkZktleV0uY29kZSkge1xuICAgICAgICAgIHRocm93IChuZXcgRXJyb3IoXG4gICAgICAgICAgICB1dGlsLmZvcm1hdCgnTm8gY29kZSBkZWZpbmVkIGZvciB1c2VyIGRlZmluZWQgZnVuY3Rpb246ICVzJywgdWRmS2V5KVxuICAgICAgICAgICkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnVkZnNbdWRmS2V5XS5pbnB1dHMgJiYgIV8uaXNQbGFpbk9iamVjdChvcHRpb25zLnVkZnNbdWRmS2V5XS5pbnB1dHMpKSB7XG4gICAgICAgICAgdGhyb3cgKG5ldyBFcnJvcihcbiAgICAgICAgICAgIHV0aWwuZm9ybWF0KCdpbnB1dHMgbXVzdCBiZSBhbiBvYmplY3QgZm9yIHVzZXIgZGVmaW5lZCBmdW5jdGlvbjogJXMnLCB1ZGZLZXkpXG4gICAgICAgICAgKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMudWRmc1t1ZGZLZXldLmlucHV0cyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgdGhyb3cgKG5ldyBFcnJvcihcbiAgICAgICAgICAgIHV0aWwuZm9ybWF0KCdpbnB1dHMgbXVzdCBiZSBhbiBvYmplY3QsIG5vdCBhbiBhcnJheSBmb3IgdXNlciBkZWZpbmVkIGZ1bmN0aW9uOiAlcycsIHVkZktleSlcbiAgICAgICAgICApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBxdWVyeSA9IHV0aWwuZm9ybWF0KFxuICAgICAgICAgIFwiU0VMRUNUICogRlJPTSBzeXN0ZW1fc2NoZW1hLmZ1bmN0aW9ucyBXSEVSRSBrZXlzcGFjZV9uYW1lID0gJyVzJyBBTkQgZnVuY3Rpb25fbmFtZSA9ICclcyc7XCIsXG4gICAgICAgICAga2V5c3BhY2UsXG4gICAgICAgICAgdWRmS2V5LnRvTG93ZXJDYXNlKClcbiAgICAgICAgKTtcbiAgICAgICAgY2xpZW50LmV4ZWN1dGUocXVlcnksIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHVkZkNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgY3JlYXRlVURGID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdWRmSW5wdXRzID0gW107XG4gICAgICAgICAgICBpZiAob3B0aW9ucy51ZGZzW3VkZktleV0uaW5wdXRzKSB7XG4gICAgICAgICAgICAgIE9iamVjdC5rZXlzKG9wdGlvbnMudWRmc1t1ZGZLZXldLmlucHV0cykuZm9yRWFjaCgoaW5wdXQpID0+IHtcbiAgICAgICAgICAgICAgICB1ZGZJbnB1dHMucHVzaCh1dGlsLmZvcm1hdChcbiAgICAgICAgICAgICAgICAgICclcyAlcycsXG4gICAgICAgICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgICAgICAgIG9wdGlvbnMudWRmc1t1ZGZLZXldLmlucHV0c1tpbnB1dF1cbiAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBxdWVyeSA9IHV0aWwuZm9ybWF0KFxuICAgICAgICAgICAgICBcIkNSRUFURSBPUiBSRVBMQUNFIEZVTkNUSU9OICVzICglcykgQ0FMTEVEIE9OIE5VTEwgSU5QVVQgUkVUVVJOUyAlcyBMQU5HVUFHRSAlcyBBUyAnJXMnO1wiLFxuICAgICAgICAgICAgICB1ZGZLZXksXG4gICAgICAgICAgICAgIHVkZklucHV0cy50b1N0cmluZygpLFxuICAgICAgICAgICAgICBvcHRpb25zLnVkZnNbdWRmS2V5XS5yZXR1cm5UeXBlLFxuICAgICAgICAgICAgICBvcHRpb25zLnVkZnNbdWRmS2V5XS5sYW5ndWFnZSxcbiAgICAgICAgICAgICAgb3B0aW9ucy51ZGZzW3VkZktleV0uY29kZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNsaWVudC5leGVjdXRlKHF1ZXJ5LCAoZXJyMSkgPT4ge1xuICAgICAgICAgICAgICB1ZGZDYWxsYmFjayhlcnIxKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAocmVzdWx0LnJvd3MgJiYgcmVzdWx0LnJvd3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgdWRmTGFuZ3VhZ2UgPSBvcHRpb25zLnVkZnNbdWRmS2V5XS5sYW5ndWFnZTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdExhbmd1YWdlID0gcmVzdWx0LnJvd3NbMF0ubGFuZ3VhZ2U7XG5cbiAgICAgICAgICAgIGNvbnN0IHVkZkNvZGUgPSBvcHRpb25zLnVkZnNbdWRmS2V5XS5jb2RlO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0Q29kZSA9IHJlc3VsdC5yb3dzWzBdLmJvZHk7XG5cbiAgICAgICAgICAgIGxldCB1ZGZSZXR1cm5UeXBlID0gb3B0aW9ucy51ZGZzW3VkZktleV0ucmV0dXJuVHlwZTtcbiAgICAgICAgICAgIHVkZlJldHVyblR5cGUgPSB1ZGZSZXR1cm5UeXBlLnJlcGxhY2UoL1tcXHNdL2csICcnKTtcbiAgICAgICAgICAgIGlmICh1ZGZSZXR1cm5UeXBlLmluZGV4T2YoJzwnKSA+IC0xICYmIHVkZlJldHVyblR5cGUuaW5kZXhPZignZnJvemVuPCcpICE9PSAwKSB7XG4gICAgICAgICAgICAgIHVkZlJldHVyblR5cGUgPSB1dGlsLmZvcm1hdCgnZnJvemVuPCVzPicsIHVkZlJldHVyblR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHJlc3VsdFJldHVyblR5cGUgPSByZXN1bHQucm93c1swXS5yZXR1cm5fdHlwZTtcbiAgICAgICAgICAgIHJlc3VsdFJldHVyblR5cGUgPSByZXN1bHRSZXR1cm5UeXBlLnJlcGxhY2UoL1tcXHNdL2csICcnKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHRSZXR1cm5UeXBlLmluZGV4T2YoJzwnKSA+IC0xICYmIHJlc3VsdFJldHVyblR5cGUuaW5kZXhPZignZnJvemVuPCcpICE9PSAwKSB7XG4gICAgICAgICAgICAgIHJlc3VsdFJldHVyblR5cGUgPSB1dGlsLmZvcm1hdCgnZnJvemVuPCVzPicsIHJlc3VsdFJldHVyblR5cGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB1ZGZJbnB1dHMgPSBvcHRpb25zLnVkZnNbdWRmS2V5XS5pbnB1dHMgPyBvcHRpb25zLnVkZnNbdWRmS2V5XS5pbnB1dHMgOiB7fTtcbiAgICAgICAgICAgIGNvbnN0IHVkZklucHV0S2V5cyA9IE9iamVjdC5rZXlzKHVkZklucHV0cyk7XG4gICAgICAgICAgICBjb25zdCB1ZGZJbnB1dFZhbHVlcyA9IF8udmFsdWVzKHVkZklucHV0cyk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVkZklucHV0VmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIHVkZklucHV0VmFsdWVzW2ldID0gdWRmSW5wdXRWYWx1ZXNbaV0ucmVwbGFjZSgvW1xcc10vZywgJycpO1xuICAgICAgICAgICAgICBpZiAodWRmSW5wdXRWYWx1ZXNbaV0uaW5kZXhPZignPCcpID4gLTEgJiYgdWRmSW5wdXRWYWx1ZXNbaV0uaW5kZXhPZignZnJvemVuPCcpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgdWRmSW5wdXRWYWx1ZXNbaV0gPSB1dGlsLmZvcm1hdCgnZnJvemVuPCVzPicsIHVkZklucHV0VmFsdWVzW2ldKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVzdWx0QXJndW1lbnROYW1lcyA9IHJlc3VsdC5yb3dzWzBdLmFyZ3VtZW50X25hbWVzO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0QXJndW1lbnRUeXBlcyA9IHJlc3VsdC5yb3dzWzBdLmFyZ3VtZW50X3R5cGVzO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHRBcmd1bWVudFR5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIHJlc3VsdEFyZ3VtZW50VHlwZXNbaV0gPSByZXN1bHRBcmd1bWVudFR5cGVzW2ldLnJlcGxhY2UoL1tcXHNdL2csICcnKTtcbiAgICAgICAgICAgICAgaWYgKHJlc3VsdEFyZ3VtZW50VHlwZXNbaV0uaW5kZXhPZignPCcpID4gLTEgJiYgcmVzdWx0QXJndW1lbnRUeXBlc1tpXS5pbmRleE9mKCdmcm96ZW48JykgIT09IDApIHtcbiAgICAgICAgICAgICAgICByZXN1bHRBcmd1bWVudFR5cGVzW2ldID0gdXRpbC5mb3JtYXQoJ2Zyb3plbjwlcz4nLCByZXN1bHRBcmd1bWVudFR5cGVzW2ldKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodWRmTGFuZ3VhZ2UgPT09IHJlc3VsdExhbmd1YWdlICYmXG4gICAgICAgICAgICAgIHVkZkNvZGUgPT09IHJlc3VsdENvZGUgJiZcbiAgICAgICAgICAgICAgdWRmUmV0dXJuVHlwZSA9PT0gcmVzdWx0UmV0dXJuVHlwZSAmJlxuICAgICAgICAgICAgICBfLmlzRXF1YWwodWRmSW5wdXRLZXlzLCByZXN1bHRBcmd1bWVudE5hbWVzKSAmJlxuICAgICAgICAgICAgICBfLmlzRXF1YWwodWRmSW5wdXRWYWx1ZXMsIHJlc3VsdEFyZ3VtZW50VHlwZXMpKSB7XG4gICAgICAgICAgICAgIHVkZkNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjcmVhdGVVREYoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3JlYXRlVURGKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0sIChlcnIpID0+IHtcbiAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH1cbiAgfSxcblxuICBfYXNzZXJ0X3VzZXJfZGVmaW5lZF9hZ2dyZWdhdGVzKGNhbGxiYWNrKSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5fZGVmaW5lX2Nvbm5lY3Rpb247XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuX29wdGlvbnM7XG4gICAgY29uc3Qga2V5c3BhY2UgPSB0aGlzLl9rZXlzcGFjZTtcblxuICAgIGlmIChvcHRpb25zLnVkYXMpIHtcbiAgICAgIGFzeW5jLmVhY2hTZXJpZXMoT2JqZWN0LmtleXMob3B0aW9ucy51ZGFzKSwgKHVkYUtleSwgdWRhQ2FsbGJhY2spID0+IHtcbiAgICAgICAgaWYgKCFvcHRpb25zLnVkYXNbdWRhS2V5XS5pbnB1dF90eXBlcykge1xuICAgICAgICAgIHRocm93IChuZXcgRXJyb3IoXG4gICAgICAgICAgICB1dGlsLmZvcm1hdCgnTm8gaW5wdXRfdHlwZXMgZGVmaW5lZCBmb3IgdXNlciBkZWZpbmVkIGZ1bmN0aW9uOiAlcycsIHVkYUtleSlcbiAgICAgICAgICApKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIShvcHRpb25zLnVkYXNbdWRhS2V5XS5pbnB1dF90eXBlcyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgICAgIHRocm93IChuZXcgRXJyb3IoXG4gICAgICAgICAgICB1dGlsLmZvcm1hdCgnaW5wdXRfdHlwZXMgbXVzdCBiZSBhbiBhcnJheSBmb3IgdXNlciBkZWZpbmVkIGZ1bmN0aW9uOiAlcycsIHVkYUtleSlcbiAgICAgICAgICApKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy51ZGFzW3VkYUtleV0uaW5wdXRfdHlwZXMubGVuZ3RoIDwgMSkge1xuICAgICAgICAgIHRocm93IChuZXcgRXJyb3IoXG4gICAgICAgICAgICB1dGlsLmZvcm1hdCgnaW5wdXRfdHlwZXMgYXJyYXkgY2Fubm90IGJlIGJsYW5rIGZvciB1c2VyIGRlZmluZWQgZnVuY3Rpb246ICVzJywgdWRhS2V5KVxuICAgICAgICAgICkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghb3B0aW9ucy51ZGFzW3VkYUtleV0uc2Z1bmMpIHtcbiAgICAgICAgICB0aHJvdyAobmV3IEVycm9yKFxuICAgICAgICAgICAgdXRpbC5mb3JtYXQoJ05vIHNmdW5jIGRlZmluZWQgZm9yIHVzZXIgZGVmaW5lZCBhZ2dyZWdhdGU6ICVzJywgdWRhS2V5KVxuICAgICAgICAgICkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghb3B0aW9ucy51ZGFzW3VkYUtleV0uc3R5cGUpIHtcbiAgICAgICAgICB0aHJvdyAobmV3IEVycm9yKFxuICAgICAgICAgICAgdXRpbC5mb3JtYXQoJ05vIHN0eXBlIGRlZmluZWQgZm9yIHVzZXIgZGVmaW5lZCBhZ2dyZWdhdGU6ICVzJywgdWRhS2V5KVxuICAgICAgICAgICkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghb3B0aW9ucy51ZGFzW3VkYUtleV0uaW5pdGNvbmQpIHtcbiAgICAgICAgICBvcHRpb25zLnVkYXNbdWRhS2V5XS5pbml0Y29uZCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcXVlcnkgPSB1dGlsLmZvcm1hdChcbiAgICAgICAgICBcIlNFTEVDVCAqIEZST00gc3lzdGVtX3NjaGVtYS5hZ2dyZWdhdGVzIFdIRVJFIGtleXNwYWNlX25hbWUgPSAnJXMnIEFORCBhZ2dyZWdhdGVfbmFtZSA9ICclcyc7XCIsXG4gICAgICAgICAga2V5c3BhY2UsXG4gICAgICAgICAgdWRhS2V5LnRvTG93ZXJDYXNlKClcbiAgICAgICAgKTtcbiAgICAgICAgY2xpZW50LmV4ZWN1dGUocXVlcnksIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHVkYUNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgY3JlYXRlVURBID0gKCkgPT4ge1xuICAgICAgICAgICAgcXVlcnkgPSB1dGlsLmZvcm1hdChcbiAgICAgICAgICAgICAgJ0NSRUFURSBPUiBSRVBMQUNFIEFHR1JFR0FURSAlcyAoJXMpIFNGVU5DICVzIFNUWVBFICVzJyxcbiAgICAgICAgICAgICAgdWRhS2V5LFxuICAgICAgICAgICAgICBvcHRpb25zLnVkYXNbdWRhS2V5XS5pbnB1dF90eXBlcy50b1N0cmluZygpLFxuICAgICAgICAgICAgICBvcHRpb25zLnVkYXNbdWRhS2V5XS5zZnVuYyxcbiAgICAgICAgICAgICAgb3B0aW9ucy51ZGFzW3VkYUtleV0uc3R5cGVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy51ZGFzW3VkYUtleV0uZmluYWxmdW5jKSBxdWVyeSArPSB1dGlsLmZvcm1hdCgnIEZJTkFMRlVOQyAlcycsIG9wdGlvbnMudWRhc1t1ZGFLZXldLmZpbmFsZnVuYyk7XG4gICAgICAgICAgICBxdWVyeSArPSB1dGlsLmZvcm1hdCgnIElOSVRDT05EICVzOycsIG9wdGlvbnMudWRhc1t1ZGFLZXldLmluaXRjb25kKTtcblxuICAgICAgICAgICAgY2xpZW50LmV4ZWN1dGUocXVlcnksIChlcnIxKSA9PiB7XG4gICAgICAgICAgICAgIHVkYUNhbGxiYWNrKGVycjEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmIChyZXN1bHQucm93cyAmJiByZXN1bHQucm93cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBpbnB1dFR5cGVzID0gb3B0aW9ucy51ZGFzW3VkYUtleV0uaW5wdXRfdHlwZXM7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0VHlwZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaW5wdXRUeXBlc1tpXSA9IGlucHV0VHlwZXNbaV0ucmVwbGFjZSgvW1xcc10vZywgJycpO1xuICAgICAgICAgICAgICBpZiAoaW5wdXRUeXBlc1tpXS5pbmRleE9mKCc8JykgPiAtMSAmJiBpbnB1dFR5cGVzW2ldLmluZGV4T2YoJ2Zyb3plbjwnKSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGlucHV0VHlwZXNbaV0gPSB1dGlsLmZvcm1hdCgnZnJvemVuPCVzPicsIGlucHV0VHlwZXNbaV0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzZnVuYyA9IG9wdGlvbnMudWRhc1t1ZGFLZXldLnNmdW5jLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBsZXQgc3R5cGUgPSBvcHRpb25zLnVkYXNbdWRhS2V5XS5zdHlwZTtcbiAgICAgICAgICAgIHN0eXBlID0gc3R5cGUucmVwbGFjZSgvW1xcc10vZywgJycpO1xuICAgICAgICAgICAgaWYgKHN0eXBlLmluZGV4T2YoJzwnKSA+IC0xICYmIHN0eXBlLmluZGV4T2YoJ2Zyb3plbjwnKSAhPT0gMCkge1xuICAgICAgICAgICAgICBzdHlwZSA9IHV0aWwuZm9ybWF0KCdmcm96ZW48JXM+Jywgc3R5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGZpbmFsZnVuYyA9IG9wdGlvbnMudWRhc1t1ZGFLZXldLmZpbmFsZnVuYztcbiAgICAgICAgICAgIGlmIChmaW5hbGZ1bmMpIGZpbmFsZnVuYyA9IGZpbmFsZnVuYy50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgZWxzZSBmaW5hbGZ1bmMgPSBudWxsO1xuICAgICAgICAgICAgbGV0IGluaXRjb25kID0gb3B0aW9ucy51ZGFzW3VkYUtleV0uaW5pdGNvbmQ7XG4gICAgICAgICAgICBpZiAoaW5pdGNvbmQpIGluaXRjb25kID0gaW5pdGNvbmQucmVwbGFjZSgvW1xcc10vZywgJycpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdC5yb3dzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHJlc3VsdEFyZ3VtZW50VHlwZXMgPSByZXN1bHQucm93c1tpXS5hcmd1bWVudF90eXBlcztcbiAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCByZXN1bHRBcmd1bWVudFR5cGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0QXJndW1lbnRUeXBlc1tqXSA9IHJlc3VsdEFyZ3VtZW50VHlwZXNbal0ucmVwbGFjZSgvW1xcc10vZywgJycpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHRBcmd1bWVudFR5cGVzW2pdLmluZGV4T2YoJzwnKSA+IC0xICYmIHJlc3VsdEFyZ3VtZW50VHlwZXNbal0uaW5kZXhPZignZnJvemVuPCcpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICByZXN1bHRBcmd1bWVudFR5cGVzW2pdID0gdXRpbC5mb3JtYXQoJ2Zyb3plbjwlcz4nLCByZXN1bHRBcmd1bWVudFR5cGVzW2pdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjb25zdCByZXN1bHRTdGF0ZUZ1bmMgPSByZXN1bHQucm93c1tpXS5zdGF0ZV9mdW5jO1xuICAgICAgICAgICAgICBsZXQgcmVzdWx0U3RhdGVUeXBlID0gcmVzdWx0LnJvd3NbaV0uc3RhdGVfdHlwZTtcbiAgICAgICAgICAgICAgcmVzdWx0U3RhdGVUeXBlID0gcmVzdWx0U3RhdGVUeXBlLnJlcGxhY2UoL1tcXHNdL2csICcnKTtcbiAgICAgICAgICAgICAgaWYgKHJlc3VsdFN0YXRlVHlwZS5pbmRleE9mKCc8JykgPiAtMSAmJiByZXN1bHRTdGF0ZVR5cGUuaW5kZXhPZignZnJvemVuPCcpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0U3RhdGVUeXBlID0gdXRpbC5mb3JtYXQoJ2Zyb3plbjwlcz4nLCByZXN1bHRTdGF0ZVR5cGUpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY29uc3QgcmVzdWx0RmluYWxGdW5jID0gcmVzdWx0LnJvd3NbaV0uZmluYWxfZnVuYztcblxuICAgICAgICAgICAgICBsZXQgcmVzdWx0SW5pdGNvbmQgPSByZXN1bHQucm93c1tpXS5pbml0Y29uZDtcbiAgICAgICAgICAgICAgaWYgKHJlc3VsdEluaXRjb25kKSByZXN1bHRJbml0Y29uZCA9IHJlc3VsdEluaXRjb25kLnJlcGxhY2UoL1tcXHNdL2csICcnKTtcblxuICAgICAgICAgICAgICBpZiAoc2Z1bmMgPT09IHJlc3VsdFN0YXRlRnVuYyAmJlxuICAgICAgICAgICAgICAgIHN0eXBlID09PSByZXN1bHRTdGF0ZVR5cGUgJiZcbiAgICAgICAgICAgICAgICBmaW5hbGZ1bmMgPT09IHJlc3VsdEZpbmFsRnVuYyAmJlxuICAgICAgICAgICAgICAgIGluaXRjb25kID09PSByZXN1bHRJbml0Y29uZCAmJlxuICAgICAgICAgICAgICAgIF8uaXNFcXVhbChpbnB1dFR5cGVzLCByZXN1bHRBcmd1bWVudFR5cGVzKSkge1xuICAgICAgICAgICAgICAgIHVkYUNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNyZWF0ZVVEQSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjcmVhdGVVREEoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSwgKGVycikgPT4ge1xuICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9LFxuXG4gIF9zZXRfY2xpZW50KGNsaWVudCkge1xuICAgIGNvbnN0IGRlZmluZUNvbm5lY3Rpb25PcHRpb25zID0gXy5jbG9uZURlZXAodGhpcy5fY29ubmVjdGlvbik7XG5cbiAgICB0aGlzLl9jbGllbnQgPSBjbGllbnQ7XG4gICAgdGhpcy5fZGVmaW5lX2Nvbm5lY3Rpb24gPSBuZXcgY3FsLkNsaWVudChkZWZpbmVDb25uZWN0aW9uT3B0aW9ucyk7XG5cbiAgICAvLyBSZXNldCBjb25uZWN0aW9ucyBvbiBhbGwgbW9kZWxzXG4gICAgT2JqZWN0LmtleXModGhpcy5fbW9kZWxzKS5mb3JFYWNoKChpKSA9PiB7XG4gICAgICB0aGlzLl9tb2RlbHNbaV0uX3Byb3BlcnRpZXMuY3FsID0gdGhpcy5fY2xpZW50O1xuICAgICAgdGhpcy5fbW9kZWxzW2ldLl9wcm9wZXJ0aWVzLmRlZmluZV9jb25uZWN0aW9uID0gdGhpcy5fZGVmaW5lX2Nvbm5lY3Rpb247XG4gICAgfSk7XG4gIH0sXG5cbiAgY29ubmVjdChjYWxsYmFjaykge1xuICAgIGNvbnN0IG9uVXNlckRlZmluZWRBZ2dyZWdhdGVzID0gKGVycikgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjYWxsYmFjayhlcnIsIHRoaXMpO1xuICAgIH07XG5cbiAgICBjb25zdCBvblVzZXJEZWZpbmVkRnVuY3Rpb25zID0gZnVuY3Rpb24gZihlcnIpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5fYXNzZXJ0X3VzZXJfZGVmaW5lZF9hZ2dyZWdhdGVzKG9uVXNlckRlZmluZWRBZ2dyZWdhdGVzLmJpbmQodGhpcykpO1xuICAgIH07XG5cbiAgICBjb25zdCBvblVzZXJEZWZpbmVkVHlwZXMgPSBmdW5jdGlvbiBmKGVycikge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLl9hc3NlcnRfdXNlcl9kZWZpbmVkX2Z1bmN0aW9ucyhvblVzZXJEZWZpbmVkRnVuY3Rpb25zLmJpbmQodGhpcykpO1xuICAgIH07XG5cbiAgICBjb25zdCBvbktleXNwYWNlID0gZnVuY3Rpb24gZihlcnIpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5fc2V0X2NsaWVudChuZXcgY3FsLkNsaWVudCh0aGlzLl9jb25uZWN0aW9uKSk7XG4gICAgICB0aGlzLl9hc3NlcnRfdXNlcl9kZWZpbmVkX3R5cGVzKG9uVXNlckRlZmluZWRUeXBlcy5iaW5kKHRoaXMpKTtcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuX2tleXNwYWNlICYmIHRoaXMuX29wdGlvbnMuY3JlYXRlS2V5c3BhY2UpIHtcbiAgICAgIHRoaXMuX2Fzc2VydF9rZXlzcGFjZShvbktleXNwYWNlLmJpbmQodGhpcykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbktleXNwYWNlLmNhbGwodGhpcyk7XG4gICAgfVxuICB9LFxuXG4gIGFkZF9tb2RlbChtb2RlbE5hbWUsIG1vZGVsU2NoZW1hLCBjYWxsYmFjaykge1xuICAgIGlmICghbW9kZWxOYW1lIHx8IHR5cGVvZiAobW9kZWxOYW1lKSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IChuZXcgRXJyb3IoJ01vZGVsIG5hbWUgbXVzdCBiZSBhIHZhbGlkIHN0cmluZycpKTtcbiAgICB9XG5cbiAgICBzY2hlbWVyLnZhbGlkYXRlX21vZGVsX3NjaGVtYShtb2RlbFNjaGVtYSk7XG5cbiAgICBjb25zdCBiYXNlUHJvcGVydGllcyA9IHtcbiAgICAgIG5hbWU6IG1vZGVsTmFtZSxcbiAgICAgIHNjaGVtYTogbW9kZWxTY2hlbWEsXG4gICAgICBrZXlzcGFjZTogdGhpcy5fa2V5c3BhY2UsXG4gICAgICBkZWZpbmVfY29ubmVjdGlvbjogdGhpcy5fZGVmaW5lX2Nvbm5lY3Rpb24sXG4gICAgICBjcWw6IHRoaXMuX2NsaWVudCxcbiAgICAgIGdldF9jb25zdHJ1Y3RvcjogdGhpcy5nZXRfbW9kZWwuYmluZCh0aGlzLCBtb2RlbE5hbWUpLFxuICAgICAgY29ubmVjdDogdGhpcy5jb25uZWN0LmJpbmQodGhpcyksXG4gICAgICBkcm9wVGFibGVPblNjaGVtYUNoYW5nZTogdGhpcy5fb3B0aW9ucy5kcm9wVGFibGVPblNjaGVtYUNoYW5nZSxcbiAgICAgIG1pZ3JhdGlvbjogdGhpcy5fb3B0aW9ucy5taWdyYXRpb24sXG4gICAgICBkaXNhYmxlVFRZQ29uZmlybWF0aW9uOiB0aGlzLl9vcHRpb25zLmRpc2FibGVUVFlDb25maXJtYXRpb24sXG4gICAgfTtcblxuICAgIHJldHVybiAodGhpcy5fbW9kZWxzW21vZGVsTmFtZV0gPSB0aGlzLl9nZW5lcmF0ZV9tb2RlbChiYXNlUHJvcGVydGllcywgY2FsbGJhY2spKTtcbiAgfSxcblxuICBnZXRfbW9kZWwobW9kZWxOYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX21vZGVsc1ttb2RlbE5hbWVdIHx8IG51bGw7XG4gIH0sXG5cbiAgY2xvc2UoY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IG5vb3A7XG5cbiAgICBpZiAoIXRoaXMuX2NsaWVudCkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fY2xpZW50LnNodXRkb3duKChlcnIpID0+IHtcbiAgICAgIGlmICghdGhpcy5fZGVmaW5lX2Nvbm5lY3Rpb24pIHtcbiAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5fZGVmaW5lX2Nvbm5lY3Rpb24uc2h1dGRvd24oKGRlcnIpID0+IHtcbiAgICAgICAgY2FsbGJhY2soZXJyIHx8IGRlcnIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwb2xsbztcbiJdfQ==