'use strict';

var fs = require('fs');
var util = require('util');
var async = require('async');
var cql = require('dse-driver');
var _ = require('lodash');
var ORM = require('./orm/apollo');
var debug = require('debug')('express-cassandra');

var CassandraClient = function f(options) {
  var self = this;
  self.modelInstance = {};
  self.orm = new ORM(options.clientOptions, options.ormOptions);
};

CassandraClient.createClient = function (options) {
  return new CassandraClient(options);
};

CassandraClient.setDirectory = function (directory) {
  CassandraClient.directory = directory;
  return CassandraClient;
};

CassandraClient.bind = function (options, cb) {
  var self = CassandraClient;
  self.modelInstance = {};
  self.orm = new ORM(options.clientOptions, options.ormOptions);
  self.orm.connect(function (err) {
    if (err) {
      if (cb) cb(err);
      return;
    }

    fs.readdir(self.directory, function (err1, list) {
      if (err1) {
        if (cb) cb(err1);
        return;
      }

      async.each(list, function (file, callback) {
        var fileName = util.format('%s/%s', self.directory, file);
        var validFileExtensions = ['js', 'javascript', 'jsx', 'coffee', 'coffeescript', 'iced', 'script', 'ts', 'tsx', 'typescript', 'cjsx', 'co', 'json', 'json5', 'litcoffee', 'liticed', 'ls', 'node', 'toml', 'wisp'];
        var fileExtension = _.last(fileName.split('.')).toLowerCase();

        if (fileName.indexOf('Model') === -1 || validFileExtensions.indexOf(fileExtension) === -1) {
          callback();
          return;
        }

        var modelName = self._translateFileNameToModelName(file);

        if (modelName) {
          var modelSchema = require(fileName);
          self.modelInstance[modelName] = self.orm.add_model(modelName.toLowerCase(), modelSchema, function (err2) {
            if (err2) callback(err2);else callback();
          });
        } else {
          callback();
        }
      }, function (err3) {
        if (err3 && cb) {
          cb(err3);
        } else if (cb) {
          cb();
        }
      });
    });
  });
};

CassandraClient.prototype.connect = function f(callback) {
  var self = this;
  self.orm.connect(callback);
};

CassandraClient.prototype.loadSchema = function f(modelName, modelSchema, callback) {
  var self = this;
  self.modelInstance[modelName] = self.orm.add_model(modelName, modelSchema, callback);
  return self.modelInstance[modelName];
};

CassandraClient.uuid = function () {
  return cql.types.Uuid.random();
};

CassandraClient.uuidFromString = function (str) {
  return cql.types.Uuid.fromString(str);
};

CassandraClient.timeuuid = function () {
  return cql.types.TimeUuid.now();
};

CassandraClient.timeuuidFromDate = function (date) {
  return cql.types.TimeUuid.fromDate(date);
};

CassandraClient.timeuuidFromString = function (str) {
  return cql.types.TimeUuid.fromString(str);
};

CassandraClient.maxTimeuuid = function (date) {
  return cql.types.TimeUuid.max(date);
};

CassandraClient.minTimeuuid = function (date) {
  return cql.types.TimeUuid.min(date);
};

CassandraClient.prototype.doBatch = function f(queries, options, callback) {
  var randomModel = this.modelInstance[Object.keys(this.modelInstance)[0]];
  var builtQueries = [];
  for (var i = 0; i < queries.length; i++) {
    builtQueries.push({
      query: queries[i].query,
      params: queries[i].params
    });
  }
  if (builtQueries.length > 1) {
    randomModel.execute_batch(builtQueries, options, function (err) {
      if (err) callback(err);else callback();
    });
    return;
  }
  if (builtQueries.length > 0) {
    debug('single query provided for batch request, applying as non batch query');
    randomModel.execute_query(builtQueries[0].query, builtQueries[0].params, options, function (err) {
      if (err) callback(err);else callback();
    });
    return;
  }
  debug('no queries provided for batch request, empty array found, doing nothing');
  callback();
};

CassandraClient.doBatch = function f(queries, options, callback) {
  if (arguments.length === 2) {
    callback = options;
    options = { prepare: true };
  }
  CassandraClient.prototype.doBatch.call(CassandraClient, queries, options, callback);
};

CassandraClient._translateFileNameToModelName = function (fileName) {
  return fileName.slice(0, fileName.lastIndexOf('.')).replace('Model', '');
};

Object.defineProperties(CassandraClient, {
  consistencies: {
    get: function get() {
      return cql.types.consistencies;
    }
  },
  datatypes: {
    get: function get() {
      return cql.types;
    }
  },
  driver: {
    get: function get() {
      return cql;
    }
  },
  instance: {
    get: function get() {
      return CassandraClient.modelInstance;
    }
  },
  close: {
    get: function get() {
      return CassandraClient.orm.close;
    }
  }
});

Object.defineProperties(CassandraClient.prototype, {
  consistencies: {
    get: function get() {
      return cql.types.consistencies;
    }
  },
  datatypes: {
    get: function get() {
      return cql.types;
    }
  },
  driver: {
    get: function get() {
      return cql;
    }
  },
  instance: {
    get: function get() {
      return this.modelInstance;
    }
  },
  close: {
    get: function get() {
      return this.orm.close;
    }
  }
});

CassandraClient.prototype.uuid = CassandraClient.uuid;
CassandraClient.prototype.uuidFromString = CassandraClient.uuidFromString;
CassandraClient.prototype.timeuuid = CassandraClient.timeuuid;
CassandraClient.prototype.timeuuidFromDate = CassandraClient.timeuuidFromDate;
CassandraClient.prototype.timeuuidFromString = CassandraClient.timeuuidFromString;
CassandraClient.prototype.maxTimeuuid = CassandraClient.maxTimeuuid;
CassandraClient.prototype.minTimeuuid = CassandraClient.minTimeuuid;

CassandraClient.prototype._translateFileNameToModelName = CassandraClient._translateFileNameToModelName;

module.exports = CassandraClient;
//# sourceMappingURL=data:application/json;base64,